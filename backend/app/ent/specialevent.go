// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flehmen-api/ent/specialevent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SpecialEvent is the model entity for the SpecialEvent schema.
type SpecialEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OccuredAt holds the value of the "occured_at" field.
	OccuredAt time.Time `json:"occured_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// DetailComment holds the value of the "detail_comment" field.
	DetailComment       string `json:"detail_comment,omitempty"`
	user_special_events *int
	selectValues        sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpecialEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case specialevent.FieldID:
			values[i] = new(sql.NullInt64)
		case specialevent.FieldTitle, specialevent.FieldDetailComment:
			values[i] = new(sql.NullString)
		case specialevent.FieldOccuredAt:
			values[i] = new(sql.NullTime)
		case specialevent.ForeignKeys[0]: // user_special_events
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpecialEvent fields.
func (se *SpecialEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case specialevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			se.ID = int(value.Int64)
		case specialevent.FieldOccuredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field occured_at", values[i])
			} else if value.Valid {
				se.OccuredAt = value.Time
			}
		case specialevent.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				se.Title = value.String
			}
		case specialevent.FieldDetailComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_comment", values[i])
			} else if value.Valid {
				se.DetailComment = value.String
			}
		case specialevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_special_events", value)
			} else if value.Valid {
				se.user_special_events = new(int)
				*se.user_special_events = int(value.Int64)
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpecialEvent.
// This includes values selected through modifiers, order, etc.
func (se *SpecialEvent) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// Update returns a builder for updating this SpecialEvent.
// Note that you need to call SpecialEvent.Unwrap() before calling this method if this SpecialEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SpecialEvent) Update() *SpecialEventUpdateOne {
	return NewSpecialEventClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SpecialEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SpecialEvent) Unwrap() *SpecialEvent {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpecialEvent is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SpecialEvent) String() string {
	var builder strings.Builder
	builder.WriteString("SpecialEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("occured_at=")
	builder.WriteString(se.OccuredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(se.Title)
	builder.WriteString(", ")
	builder.WriteString("detail_comment=")
	builder.WriteString(se.DetailComment)
	builder.WriteByte(')')
	return builder.String()
}

// SpecialEvents is a parsable slice of SpecialEvent.
type SpecialEvents []*SpecialEvent
