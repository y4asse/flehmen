// Code generated by ent, DO NOT EDIT.

package nextaction

import (
	"flehmen-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLTE(FieldID, id))
}

// ScoreMin applies equality check predicate on the "score_min" field. It's identical to ScoreMinEQ.
func ScoreMin(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldScoreMin, v))
}

// ScoreMax applies equality check predicate on the "score_max" field. It's identical to ScoreMaxEQ.
func ScoreMax(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldScoreMax, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldAction, v))
}

// ScoreMinEQ applies the EQ predicate on the "score_min" field.
func ScoreMinEQ(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldScoreMin, v))
}

// ScoreMinNEQ applies the NEQ predicate on the "score_min" field.
func ScoreMinNEQ(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNEQ(FieldScoreMin, v))
}

// ScoreMinIn applies the In predicate on the "score_min" field.
func ScoreMinIn(vs ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldIn(FieldScoreMin, vs...))
}

// ScoreMinNotIn applies the NotIn predicate on the "score_min" field.
func ScoreMinNotIn(vs ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNotIn(FieldScoreMin, vs...))
}

// ScoreMinGT applies the GT predicate on the "score_min" field.
func ScoreMinGT(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGT(FieldScoreMin, v))
}

// ScoreMinGTE applies the GTE predicate on the "score_min" field.
func ScoreMinGTE(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGTE(FieldScoreMin, v))
}

// ScoreMinLT applies the LT predicate on the "score_min" field.
func ScoreMinLT(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLT(FieldScoreMin, v))
}

// ScoreMinLTE applies the LTE predicate on the "score_min" field.
func ScoreMinLTE(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLTE(FieldScoreMin, v))
}

// ScoreMaxEQ applies the EQ predicate on the "score_max" field.
func ScoreMaxEQ(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldScoreMax, v))
}

// ScoreMaxNEQ applies the NEQ predicate on the "score_max" field.
func ScoreMaxNEQ(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNEQ(FieldScoreMax, v))
}

// ScoreMaxIn applies the In predicate on the "score_max" field.
func ScoreMaxIn(vs ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldIn(FieldScoreMax, vs...))
}

// ScoreMaxNotIn applies the NotIn predicate on the "score_max" field.
func ScoreMaxNotIn(vs ...int) predicate.NextAction {
	return predicate.NextAction(sql.FieldNotIn(FieldScoreMax, vs...))
}

// ScoreMaxGT applies the GT predicate on the "score_max" field.
func ScoreMaxGT(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGT(FieldScoreMax, v))
}

// ScoreMaxGTE applies the GTE predicate on the "score_max" field.
func ScoreMaxGTE(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldGTE(FieldScoreMax, v))
}

// ScoreMaxLT applies the LT predicate on the "score_max" field.
func ScoreMaxLT(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLT(FieldScoreMax, v))
}

// ScoreMaxLTE applies the LTE predicate on the "score_max" field.
func ScoreMaxLTE(v int) predicate.NextAction {
	return predicate.NextAction(sql.FieldLTE(FieldScoreMax, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.NextAction {
	return predicate.NextAction(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.NextAction {
	return predicate.NextAction(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.NextAction {
	return predicate.NextAction(sql.FieldContainsFold(FieldAction, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NextAction) predicate.NextAction {
	return predicate.NextAction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NextAction) predicate.NextAction {
	return predicate.NextAction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NextAction) predicate.NextAction {
	return predicate.NextAction(sql.NotPredicates(p))
}
