// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flehmen-api/ent/nextaction"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NextAction is the model entity for the NextAction schema.
type NextAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScoreMin holds the value of the "score_min" field.
	ScoreMin int `json:"score_min,omitempty"`
	// ScoreMax holds the value of the "score_max" field.
	ScoreMax int `json:"score_max,omitempty"`
	// Action holds the value of the "action" field.
	Action       string `json:"action,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NextAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nextaction.FieldID, nextaction.FieldScoreMin, nextaction.FieldScoreMax:
			values[i] = new(sql.NullInt64)
		case nextaction.FieldAction:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NextAction fields.
func (na *NextAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nextaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			na.ID = int(value.Int64)
		case nextaction.FieldScoreMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score_min", values[i])
			} else if value.Valid {
				na.ScoreMin = int(value.Int64)
			}
		case nextaction.FieldScoreMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score_max", values[i])
			} else if value.Valid {
				na.ScoreMax = int(value.Int64)
			}
		case nextaction.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				na.Action = value.String
			}
		default:
			na.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NextAction.
// This includes values selected through modifiers, order, etc.
func (na *NextAction) Value(name string) (ent.Value, error) {
	return na.selectValues.Get(name)
}

// Update returns a builder for updating this NextAction.
// Note that you need to call NextAction.Unwrap() before calling this method if this NextAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (na *NextAction) Update() *NextActionUpdateOne {
	return NewNextActionClient(na.config).UpdateOne(na)
}

// Unwrap unwraps the NextAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (na *NextAction) Unwrap() *NextAction {
	_tx, ok := na.config.driver.(*txDriver)
	if !ok {
		panic("ent: NextAction is not a transactional entity")
	}
	na.config.driver = _tx.drv
	return na
}

// String implements the fmt.Stringer.
func (na *NextAction) String() string {
	var builder strings.Builder
	builder.WriteString("NextAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", na.ID))
	builder.WriteString("score_min=")
	builder.WriteString(fmt.Sprintf("%v", na.ScoreMin))
	builder.WriteString(", ")
	builder.WriteString("score_max=")
	builder.WriteString(fmt.Sprintf("%v", na.ScoreMax))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(na.Action)
	builder.WriteByte(')')
	return builder.String()
}

// NextActions is a parsable slice of NextAction.
type NextActions []*NextAction
