// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/mbti"
	"flehmen-api/ent/predicate"
	"flehmen-api/ent/sukipi"
	"flehmen-api/ent/tweet"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SukipiUpdate is the builder for updating Sukipi entities.
type SukipiUpdate struct {
	config
	hooks    []Hook
	mutation *SukipiMutation
}

// Where appends a list predicates to the SukipiUpdate builder.
func (su *SukipiUpdate) Where(ps ...predicate.Sukipi) *SukipiUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SukipiUpdate) SetName(s string) *SukipiUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableName(s *string) *SukipiUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetWeight sets the "weight" field.
func (su *SukipiUpdate) SetWeight(f float64) *SukipiUpdate {
	su.mutation.ResetWeight()
	su.mutation.SetWeight(f)
	return su
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableWeight(f *float64) *SukipiUpdate {
	if f != nil {
		su.SetWeight(*f)
	}
	return su
}

// AddWeight adds f to the "weight" field.
func (su *SukipiUpdate) AddWeight(f float64) *SukipiUpdate {
	su.mutation.AddWeight(f)
	return su
}

// ClearWeight clears the value of the "weight" field.
func (su *SukipiUpdate) ClearWeight() *SukipiUpdate {
	su.mutation.ClearWeight()
	return su
}

// SetHeight sets the "height" field.
func (su *SukipiUpdate) SetHeight(f float64) *SukipiUpdate {
	su.mutation.ResetHeight()
	su.mutation.SetHeight(f)
	return su
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableHeight(f *float64) *SukipiUpdate {
	if f != nil {
		su.SetHeight(*f)
	}
	return su
}

// AddHeight adds f to the "height" field.
func (su *SukipiUpdate) AddHeight(f float64) *SukipiUpdate {
	su.mutation.AddHeight(f)
	return su
}

// ClearHeight clears the value of the "height" field.
func (su *SukipiUpdate) ClearHeight() *SukipiUpdate {
	su.mutation.ClearHeight()
	return su
}

// SetXID sets the "x_id" field.
func (su *SukipiUpdate) SetXID(s string) *SukipiUpdate {
	su.mutation.SetXID(s)
	return su
}

// SetNillableXID sets the "x_id" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableXID(s *string) *SukipiUpdate {
	if s != nil {
		su.SetXID(*s)
	}
	return su
}

// ClearXID clears the value of the "x_id" field.
func (su *SukipiUpdate) ClearXID() *SukipiUpdate {
	su.mutation.ClearXID()
	return su
}

// SetHobby sets the "hobby" field.
func (su *SukipiUpdate) SetHobby(s string) *SukipiUpdate {
	su.mutation.SetHobby(s)
	return su
}

// SetNillableHobby sets the "hobby" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableHobby(s *string) *SukipiUpdate {
	if s != nil {
		su.SetHobby(*s)
	}
	return su
}

// ClearHobby clears the value of the "hobby" field.
func (su *SukipiUpdate) ClearHobby() *SukipiUpdate {
	su.mutation.ClearHobby()
	return su
}

// SetBirthday sets the "birthday" field.
func (su *SukipiUpdate) SetBirthday(t time.Time) *SukipiUpdate {
	su.mutation.SetBirthday(t)
	return su
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableBirthday(t *time.Time) *SukipiUpdate {
	if t != nil {
		su.SetBirthday(*t)
	}
	return su
}

// ClearBirthday clears the value of the "birthday" field.
func (su *SukipiUpdate) ClearBirthday() *SukipiUpdate {
	su.mutation.ClearBirthday()
	return su
}

// SetShowsSize sets the "showsSize" field.
func (su *SukipiUpdate) SetShowsSize(s string) *SukipiUpdate {
	su.mutation.SetShowsSize(s)
	return su
}

// SetNillableShowsSize sets the "showsSize" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableShowsSize(s *string) *SukipiUpdate {
	if s != nil {
		su.SetShowsSize(*s)
	}
	return su
}

// ClearShowsSize clears the value of the "showsSize" field.
func (su *SukipiUpdate) ClearShowsSize() *SukipiUpdate {
	su.mutation.ClearShowsSize()
	return su
}

// SetFamily sets the "family" field.
func (su *SukipiUpdate) SetFamily(s string) *SukipiUpdate {
	su.mutation.SetFamily(s)
	return su
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableFamily(s *string) *SukipiUpdate {
	if s != nil {
		su.SetFamily(*s)
	}
	return su
}

// ClearFamily clears the value of the "family" field.
func (su *SukipiUpdate) ClearFamily() *SukipiUpdate {
	su.mutation.ClearFamily()
	return su
}

// SetNearlyStation sets the "nearly_station" field.
func (su *SukipiUpdate) SetNearlyStation(s string) *SukipiUpdate {
	su.mutation.SetNearlyStation(s)
	return su
}

// SetNillableNearlyStation sets the "nearly_station" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableNearlyStation(s *string) *SukipiUpdate {
	if s != nil {
		su.SetNearlyStation(*s)
	}
	return su
}

// ClearNearlyStation clears the value of the "nearly_station" field.
func (su *SukipiUpdate) ClearNearlyStation() *SukipiUpdate {
	su.mutation.ClearNearlyStation()
	return su
}

// SetLikedAt sets the "liked_at" field.
func (su *SukipiUpdate) SetLikedAt(t time.Time) *SukipiUpdate {
	su.mutation.SetLikedAt(t)
	return su
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableLikedAt(t *time.Time) *SukipiUpdate {
	if t != nil {
		su.SetLikedAt(*t)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SukipiUpdate) SetCreatedAt(t time.Time) *SukipiUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SukipiUpdate) SetNillableCreatedAt(t *time.Time) *SukipiUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetMbtiID sets the "mbti" edge to the Mbti entity by ID.
func (su *SukipiUpdate) SetMbtiID(id int) *SukipiUpdate {
	su.mutation.SetMbtiID(id)
	return su
}

// SetNillableMbtiID sets the "mbti" edge to the Mbti entity by ID if the given value is not nil.
func (su *SukipiUpdate) SetNillableMbtiID(id *int) *SukipiUpdate {
	if id != nil {
		su = su.SetMbtiID(*id)
	}
	return su
}

// SetMbti sets the "mbti" edge to the Mbti entity.
func (su *SukipiUpdate) SetMbti(m *Mbti) *SukipiUpdate {
	return su.SetMbtiID(m.ID)
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by IDs.
func (su *SukipiUpdate) AddTweetIDs(ids ...int) *SukipiUpdate {
	su.mutation.AddTweetIDs(ids...)
	return su
}

// AddTweets adds the "tweets" edges to the Tweet entity.
func (su *SukipiUpdate) AddTweets(t ...*Tweet) *SukipiUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTweetIDs(ids...)
}

// Mutation returns the SukipiMutation object of the builder.
func (su *SukipiUpdate) Mutation() *SukipiMutation {
	return su.mutation
}

// ClearMbti clears the "mbti" edge to the Mbti entity.
func (su *SukipiUpdate) ClearMbti() *SukipiUpdate {
	su.mutation.ClearMbti()
	return su
}

// ClearTweets clears all "tweets" edges to the Tweet entity.
func (su *SukipiUpdate) ClearTweets() *SukipiUpdate {
	su.mutation.ClearTweets()
	return su
}

// RemoveTweetIDs removes the "tweets" edge to Tweet entities by IDs.
func (su *SukipiUpdate) RemoveTweetIDs(ids ...int) *SukipiUpdate {
	su.mutation.RemoveTweetIDs(ids...)
	return su
}

// RemoveTweets removes "tweets" edges to Tweet entities.
func (su *SukipiUpdate) RemoveTweets(t ...*Tweet) *SukipiUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTweetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SukipiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SukipiUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SukipiUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SukipiUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SukipiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sukipi.Table, sukipi.Columns, sqlgraph.NewFieldSpec(sukipi.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sukipi.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Weight(); ok {
		_spec.SetField(sukipi.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedWeight(); ok {
		_spec.AddField(sukipi.FieldWeight, field.TypeFloat64, value)
	}
	if su.mutation.WeightCleared() {
		_spec.ClearField(sukipi.FieldWeight, field.TypeFloat64)
	}
	if value, ok := su.mutation.Height(); ok {
		_spec.SetField(sukipi.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedHeight(); ok {
		_spec.AddField(sukipi.FieldHeight, field.TypeFloat64, value)
	}
	if su.mutation.HeightCleared() {
		_spec.ClearField(sukipi.FieldHeight, field.TypeFloat64)
	}
	if value, ok := su.mutation.XID(); ok {
		_spec.SetField(sukipi.FieldXID, field.TypeString, value)
	}
	if su.mutation.XIDCleared() {
		_spec.ClearField(sukipi.FieldXID, field.TypeString)
	}
	if value, ok := su.mutation.Hobby(); ok {
		_spec.SetField(sukipi.FieldHobby, field.TypeString, value)
	}
	if su.mutation.HobbyCleared() {
		_spec.ClearField(sukipi.FieldHobby, field.TypeString)
	}
	if value, ok := su.mutation.Birthday(); ok {
		_spec.SetField(sukipi.FieldBirthday, field.TypeTime, value)
	}
	if su.mutation.BirthdayCleared() {
		_spec.ClearField(sukipi.FieldBirthday, field.TypeTime)
	}
	if value, ok := su.mutation.ShowsSize(); ok {
		_spec.SetField(sukipi.FieldShowsSize, field.TypeString, value)
	}
	if su.mutation.ShowsSizeCleared() {
		_spec.ClearField(sukipi.FieldShowsSize, field.TypeString)
	}
	if value, ok := su.mutation.Family(); ok {
		_spec.SetField(sukipi.FieldFamily, field.TypeString, value)
	}
	if su.mutation.FamilyCleared() {
		_spec.ClearField(sukipi.FieldFamily, field.TypeString)
	}
	if value, ok := su.mutation.NearlyStation(); ok {
		_spec.SetField(sukipi.FieldNearlyStation, field.TypeString, value)
	}
	if su.mutation.NearlyStationCleared() {
		_spec.ClearField(sukipi.FieldNearlyStation, field.TypeString)
	}
	if value, ok := su.mutation.LikedAt(); ok {
		_spec.SetField(sukipi.FieldLikedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(sukipi.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.MbtiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sukipi.MbtiTable,
			Columns: []string{sukipi.MbtiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MbtiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sukipi.MbtiTable,
			Columns: []string{sukipi.MbtiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTweetsIDs(); len(nodes) > 0 && !su.mutation.TweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TweetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sukipi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SukipiUpdateOne is the builder for updating a single Sukipi entity.
type SukipiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SukipiMutation
}

// SetName sets the "name" field.
func (suo *SukipiUpdateOne) SetName(s string) *SukipiUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableName(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetWeight sets the "weight" field.
func (suo *SukipiUpdateOne) SetWeight(f float64) *SukipiUpdateOne {
	suo.mutation.ResetWeight()
	suo.mutation.SetWeight(f)
	return suo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableWeight(f *float64) *SukipiUpdateOne {
	if f != nil {
		suo.SetWeight(*f)
	}
	return suo
}

// AddWeight adds f to the "weight" field.
func (suo *SukipiUpdateOne) AddWeight(f float64) *SukipiUpdateOne {
	suo.mutation.AddWeight(f)
	return suo
}

// ClearWeight clears the value of the "weight" field.
func (suo *SukipiUpdateOne) ClearWeight() *SukipiUpdateOne {
	suo.mutation.ClearWeight()
	return suo
}

// SetHeight sets the "height" field.
func (suo *SukipiUpdateOne) SetHeight(f float64) *SukipiUpdateOne {
	suo.mutation.ResetHeight()
	suo.mutation.SetHeight(f)
	return suo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableHeight(f *float64) *SukipiUpdateOne {
	if f != nil {
		suo.SetHeight(*f)
	}
	return suo
}

// AddHeight adds f to the "height" field.
func (suo *SukipiUpdateOne) AddHeight(f float64) *SukipiUpdateOne {
	suo.mutation.AddHeight(f)
	return suo
}

// ClearHeight clears the value of the "height" field.
func (suo *SukipiUpdateOne) ClearHeight() *SukipiUpdateOne {
	suo.mutation.ClearHeight()
	return suo
}

// SetXID sets the "x_id" field.
func (suo *SukipiUpdateOne) SetXID(s string) *SukipiUpdateOne {
	suo.mutation.SetXID(s)
	return suo
}

// SetNillableXID sets the "x_id" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableXID(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetXID(*s)
	}
	return suo
}

// ClearXID clears the value of the "x_id" field.
func (suo *SukipiUpdateOne) ClearXID() *SukipiUpdateOne {
	suo.mutation.ClearXID()
	return suo
}

// SetHobby sets the "hobby" field.
func (suo *SukipiUpdateOne) SetHobby(s string) *SukipiUpdateOne {
	suo.mutation.SetHobby(s)
	return suo
}

// SetNillableHobby sets the "hobby" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableHobby(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetHobby(*s)
	}
	return suo
}

// ClearHobby clears the value of the "hobby" field.
func (suo *SukipiUpdateOne) ClearHobby() *SukipiUpdateOne {
	suo.mutation.ClearHobby()
	return suo
}

// SetBirthday sets the "birthday" field.
func (suo *SukipiUpdateOne) SetBirthday(t time.Time) *SukipiUpdateOne {
	suo.mutation.SetBirthday(t)
	return suo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableBirthday(t *time.Time) *SukipiUpdateOne {
	if t != nil {
		suo.SetBirthday(*t)
	}
	return suo
}

// ClearBirthday clears the value of the "birthday" field.
func (suo *SukipiUpdateOne) ClearBirthday() *SukipiUpdateOne {
	suo.mutation.ClearBirthday()
	return suo
}

// SetShowsSize sets the "showsSize" field.
func (suo *SukipiUpdateOne) SetShowsSize(s string) *SukipiUpdateOne {
	suo.mutation.SetShowsSize(s)
	return suo
}

// SetNillableShowsSize sets the "showsSize" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableShowsSize(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetShowsSize(*s)
	}
	return suo
}

// ClearShowsSize clears the value of the "showsSize" field.
func (suo *SukipiUpdateOne) ClearShowsSize() *SukipiUpdateOne {
	suo.mutation.ClearShowsSize()
	return suo
}

// SetFamily sets the "family" field.
func (suo *SukipiUpdateOne) SetFamily(s string) *SukipiUpdateOne {
	suo.mutation.SetFamily(s)
	return suo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableFamily(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetFamily(*s)
	}
	return suo
}

// ClearFamily clears the value of the "family" field.
func (suo *SukipiUpdateOne) ClearFamily() *SukipiUpdateOne {
	suo.mutation.ClearFamily()
	return suo
}

// SetNearlyStation sets the "nearly_station" field.
func (suo *SukipiUpdateOne) SetNearlyStation(s string) *SukipiUpdateOne {
	suo.mutation.SetNearlyStation(s)
	return suo
}

// SetNillableNearlyStation sets the "nearly_station" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableNearlyStation(s *string) *SukipiUpdateOne {
	if s != nil {
		suo.SetNearlyStation(*s)
	}
	return suo
}

// ClearNearlyStation clears the value of the "nearly_station" field.
func (suo *SukipiUpdateOne) ClearNearlyStation() *SukipiUpdateOne {
	suo.mutation.ClearNearlyStation()
	return suo
}

// SetLikedAt sets the "liked_at" field.
func (suo *SukipiUpdateOne) SetLikedAt(t time.Time) *SukipiUpdateOne {
	suo.mutation.SetLikedAt(t)
	return suo
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableLikedAt(t *time.Time) *SukipiUpdateOne {
	if t != nil {
		suo.SetLikedAt(*t)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SukipiUpdateOne) SetCreatedAt(t time.Time) *SukipiUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableCreatedAt(t *time.Time) *SukipiUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetMbtiID sets the "mbti" edge to the Mbti entity by ID.
func (suo *SukipiUpdateOne) SetMbtiID(id int) *SukipiUpdateOne {
	suo.mutation.SetMbtiID(id)
	return suo
}

// SetNillableMbtiID sets the "mbti" edge to the Mbti entity by ID if the given value is not nil.
func (suo *SukipiUpdateOne) SetNillableMbtiID(id *int) *SukipiUpdateOne {
	if id != nil {
		suo = suo.SetMbtiID(*id)
	}
	return suo
}

// SetMbti sets the "mbti" edge to the Mbti entity.
func (suo *SukipiUpdateOne) SetMbti(m *Mbti) *SukipiUpdateOne {
	return suo.SetMbtiID(m.ID)
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by IDs.
func (suo *SukipiUpdateOne) AddTweetIDs(ids ...int) *SukipiUpdateOne {
	suo.mutation.AddTweetIDs(ids...)
	return suo
}

// AddTweets adds the "tweets" edges to the Tweet entity.
func (suo *SukipiUpdateOne) AddTweets(t ...*Tweet) *SukipiUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTweetIDs(ids...)
}

// Mutation returns the SukipiMutation object of the builder.
func (suo *SukipiUpdateOne) Mutation() *SukipiMutation {
	return suo.mutation
}

// ClearMbti clears the "mbti" edge to the Mbti entity.
func (suo *SukipiUpdateOne) ClearMbti() *SukipiUpdateOne {
	suo.mutation.ClearMbti()
	return suo
}

// ClearTweets clears all "tweets" edges to the Tweet entity.
func (suo *SukipiUpdateOne) ClearTweets() *SukipiUpdateOne {
	suo.mutation.ClearTweets()
	return suo
}

// RemoveTweetIDs removes the "tweets" edge to Tweet entities by IDs.
func (suo *SukipiUpdateOne) RemoveTweetIDs(ids ...int) *SukipiUpdateOne {
	suo.mutation.RemoveTweetIDs(ids...)
	return suo
}

// RemoveTweets removes "tweets" edges to Tweet entities.
func (suo *SukipiUpdateOne) RemoveTweets(t ...*Tweet) *SukipiUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTweetIDs(ids...)
}

// Where appends a list predicates to the SukipiUpdate builder.
func (suo *SukipiUpdateOne) Where(ps ...predicate.Sukipi) *SukipiUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SukipiUpdateOne) Select(field string, fields ...string) *SukipiUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sukipi entity.
func (suo *SukipiUpdateOne) Save(ctx context.Context) (*Sukipi, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SukipiUpdateOne) SaveX(ctx context.Context) *Sukipi {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SukipiUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SukipiUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SukipiUpdateOne) sqlSave(ctx context.Context) (_node *Sukipi, err error) {
	_spec := sqlgraph.NewUpdateSpec(sukipi.Table, sukipi.Columns, sqlgraph.NewFieldSpec(sukipi.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sukipi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sukipi.FieldID)
		for _, f := range fields {
			if !sukipi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sukipi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sukipi.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Weight(); ok {
		_spec.SetField(sukipi.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedWeight(); ok {
		_spec.AddField(sukipi.FieldWeight, field.TypeFloat64, value)
	}
	if suo.mutation.WeightCleared() {
		_spec.ClearField(sukipi.FieldWeight, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Height(); ok {
		_spec.SetField(sukipi.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedHeight(); ok {
		_spec.AddField(sukipi.FieldHeight, field.TypeFloat64, value)
	}
	if suo.mutation.HeightCleared() {
		_spec.ClearField(sukipi.FieldHeight, field.TypeFloat64)
	}
	if value, ok := suo.mutation.XID(); ok {
		_spec.SetField(sukipi.FieldXID, field.TypeString, value)
	}
	if suo.mutation.XIDCleared() {
		_spec.ClearField(sukipi.FieldXID, field.TypeString)
	}
	if value, ok := suo.mutation.Hobby(); ok {
		_spec.SetField(sukipi.FieldHobby, field.TypeString, value)
	}
	if suo.mutation.HobbyCleared() {
		_spec.ClearField(sukipi.FieldHobby, field.TypeString)
	}
	if value, ok := suo.mutation.Birthday(); ok {
		_spec.SetField(sukipi.FieldBirthday, field.TypeTime, value)
	}
	if suo.mutation.BirthdayCleared() {
		_spec.ClearField(sukipi.FieldBirthday, field.TypeTime)
	}
	if value, ok := suo.mutation.ShowsSize(); ok {
		_spec.SetField(sukipi.FieldShowsSize, field.TypeString, value)
	}
	if suo.mutation.ShowsSizeCleared() {
		_spec.ClearField(sukipi.FieldShowsSize, field.TypeString)
	}
	if value, ok := suo.mutation.Family(); ok {
		_spec.SetField(sukipi.FieldFamily, field.TypeString, value)
	}
	if suo.mutation.FamilyCleared() {
		_spec.ClearField(sukipi.FieldFamily, field.TypeString)
	}
	if value, ok := suo.mutation.NearlyStation(); ok {
		_spec.SetField(sukipi.FieldNearlyStation, field.TypeString, value)
	}
	if suo.mutation.NearlyStationCleared() {
		_spec.ClearField(sukipi.FieldNearlyStation, field.TypeString)
	}
	if value, ok := suo.mutation.LikedAt(); ok {
		_spec.SetField(sukipi.FieldLikedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(sukipi.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.MbtiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sukipi.MbtiTable,
			Columns: []string{sukipi.MbtiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MbtiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sukipi.MbtiTable,
			Columns: []string{sukipi.MbtiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTweetsIDs(); len(nodes) > 0 && !suo.mutation.TweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TweetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sukipi.TweetsTable,
			Columns: []string{sukipi.TweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sukipi{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sukipi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
