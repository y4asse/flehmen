// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/predicate"
	"flehmen-api/ent/tweet"
	"flehmen-api/ent/twitteruser"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwitterUserUpdate is the builder for updating TwitterUser entities.
type TwitterUserUpdate struct {
	config
	hooks    []Hook
	mutation *TwitterUserMutation
}

// Where appends a list predicates to the TwitterUserUpdate builder.
func (tuu *TwitterUserUpdate) Where(ps ...predicate.TwitterUser) *TwitterUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetName sets the "name" field.
func (tuu *TwitterUserUpdate) SetName(s string) *TwitterUserUpdate {
	tuu.mutation.SetName(s)
	return tuu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuu *TwitterUserUpdate) SetNillableName(s *string) *TwitterUserUpdate {
	if s != nil {
		tuu.SetName(*s)
	}
	return tuu
}

// SetUsername sets the "username" field.
func (tuu *TwitterUserUpdate) SetUsername(s string) *TwitterUserUpdate {
	tuu.mutation.SetUsername(s)
	return tuu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tuu *TwitterUserUpdate) SetNillableUsername(s *string) *TwitterUserUpdate {
	if s != nil {
		tuu.SetUsername(*s)
	}
	return tuu
}

// SetCreatedAt sets the "created_at" field.
func (tuu *TwitterUserUpdate) SetCreatedAt(t time.Time) *TwitterUserUpdate {
	tuu.mutation.SetCreatedAt(t)
	return tuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuu *TwitterUserUpdate) SetNillableCreatedAt(t *time.Time) *TwitterUserUpdate {
	if t != nil {
		tuu.SetCreatedAt(*t)
	}
	return tuu
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by IDs.
func (tuu *TwitterUserUpdate) AddReplyIDs(ids ...int) *TwitterUserUpdate {
	tuu.mutation.AddReplyIDs(ids...)
	return tuu
}

// AddReplies adds the "replies" edges to the Tweet entity.
func (tuu *TwitterUserUpdate) AddReplies(t ...*Tweet) *TwitterUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.AddReplyIDs(ids...)
}

// Mutation returns the TwitterUserMutation object of the builder.
func (tuu *TwitterUserUpdate) Mutation() *TwitterUserMutation {
	return tuu.mutation
}

// ClearReplies clears all "replies" edges to the Tweet entity.
func (tuu *TwitterUserUpdate) ClearReplies() *TwitterUserUpdate {
	tuu.mutation.ClearReplies()
	return tuu
}

// RemoveReplyIDs removes the "replies" edge to Tweet entities by IDs.
func (tuu *TwitterUserUpdate) RemoveReplyIDs(ids ...int) *TwitterUserUpdate {
	tuu.mutation.RemoveReplyIDs(ids...)
	return tuu
}

// RemoveReplies removes "replies" edges to Tweet entities.
func (tuu *TwitterUserUpdate) RemoveReplies(t ...*Tweet) *TwitterUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.RemoveReplyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TwitterUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tuu.sqlSave, tuu.mutation, tuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TwitterUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TwitterUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TwitterUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuu *TwitterUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitteruser.Table, twitteruser.Columns, sqlgraph.NewFieldSpec(twitteruser.FieldID, field.TypeInt))
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.Name(); ok {
		_spec.SetField(twitteruser.FieldName, field.TypeString, value)
	}
	if value, ok := tuu.mutation.Username(); ok {
		_spec.SetField(twitteruser.FieldUsername, field.TypeString, value)
	}
	if value, ok := tuu.mutation.CreatedAt(); ok {
		_spec.SetField(twitteruser.FieldCreatedAt, field.TypeTime, value)
	}
	if tuu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tuu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitteruser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tuu.mutation.done = true
	return n, nil
}

// TwitterUserUpdateOne is the builder for updating a single TwitterUser entity.
type TwitterUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwitterUserMutation
}

// SetName sets the "name" field.
func (tuuo *TwitterUserUpdateOne) SetName(s string) *TwitterUserUpdateOne {
	tuuo.mutation.SetName(s)
	return tuuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuuo *TwitterUserUpdateOne) SetNillableName(s *string) *TwitterUserUpdateOne {
	if s != nil {
		tuuo.SetName(*s)
	}
	return tuuo
}

// SetUsername sets the "username" field.
func (tuuo *TwitterUserUpdateOne) SetUsername(s string) *TwitterUserUpdateOne {
	tuuo.mutation.SetUsername(s)
	return tuuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tuuo *TwitterUserUpdateOne) SetNillableUsername(s *string) *TwitterUserUpdateOne {
	if s != nil {
		tuuo.SetUsername(*s)
	}
	return tuuo
}

// SetCreatedAt sets the "created_at" field.
func (tuuo *TwitterUserUpdateOne) SetCreatedAt(t time.Time) *TwitterUserUpdateOne {
	tuuo.mutation.SetCreatedAt(t)
	return tuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuuo *TwitterUserUpdateOne) SetNillableCreatedAt(t *time.Time) *TwitterUserUpdateOne {
	if t != nil {
		tuuo.SetCreatedAt(*t)
	}
	return tuuo
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by IDs.
func (tuuo *TwitterUserUpdateOne) AddReplyIDs(ids ...int) *TwitterUserUpdateOne {
	tuuo.mutation.AddReplyIDs(ids...)
	return tuuo
}

// AddReplies adds the "replies" edges to the Tweet entity.
func (tuuo *TwitterUserUpdateOne) AddReplies(t ...*Tweet) *TwitterUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.AddReplyIDs(ids...)
}

// Mutation returns the TwitterUserMutation object of the builder.
func (tuuo *TwitterUserUpdateOne) Mutation() *TwitterUserMutation {
	return tuuo.mutation
}

// ClearReplies clears all "replies" edges to the Tweet entity.
func (tuuo *TwitterUserUpdateOne) ClearReplies() *TwitterUserUpdateOne {
	tuuo.mutation.ClearReplies()
	return tuuo
}

// RemoveReplyIDs removes the "replies" edge to Tweet entities by IDs.
func (tuuo *TwitterUserUpdateOne) RemoveReplyIDs(ids ...int) *TwitterUserUpdateOne {
	tuuo.mutation.RemoveReplyIDs(ids...)
	return tuuo
}

// RemoveReplies removes "replies" edges to Tweet entities.
func (tuuo *TwitterUserUpdateOne) RemoveReplies(t ...*Tweet) *TwitterUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.RemoveReplyIDs(ids...)
}

// Where appends a list predicates to the TwitterUserUpdate builder.
func (tuuo *TwitterUserUpdateOne) Where(ps ...predicate.TwitterUser) *TwitterUserUpdateOne {
	tuuo.mutation.Where(ps...)
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TwitterUserUpdateOne) Select(field string, fields ...string) *TwitterUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TwitterUser entity.
func (tuuo *TwitterUserUpdateOne) Save(ctx context.Context) (*TwitterUser, error) {
	return withHooks(ctx, tuuo.sqlSave, tuuo.mutation, tuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TwitterUserUpdateOne) SaveX(ctx context.Context) *TwitterUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TwitterUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TwitterUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuuo *TwitterUserUpdateOne) sqlSave(ctx context.Context) (_node *TwitterUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitteruser.Table, twitteruser.Columns, sqlgraph.NewFieldSpec(twitteruser.FieldID, field.TypeInt))
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwitterUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitteruser.FieldID)
		for _, f := range fields {
			if !twitteruser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twitteruser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.Name(); ok {
		_spec.SetField(twitteruser.FieldName, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.Username(); ok {
		_spec.SetField(twitteruser.FieldUsername, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.CreatedAt(); ok {
		_spec.SetField(twitteruser.FieldCreatedAt, field.TypeTime, value)
	}
	if tuuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tuuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TwitterUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitteruser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuuo.mutation.done = true
	return _node, nil
}
