// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"flehmen-api/ent/migrate"

	"flehmen-api/ent/nextaction"
	"flehmen-api/ent/sukipi"
	"flehmen-api/ent/university"
	"flehmen-api/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// NextAction is the client for interacting with the NextAction builders.
	NextAction *NextActionClient
	// Sukipi is the client for interacting with the Sukipi builders.
	Sukipi *SukipiClient
	// University is the client for interacting with the University builders.
	University *UniversityClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.NextAction = NewNextActionClient(c.config)
	c.Sukipi = NewSukipiClient(c.config)
	c.University = NewUniversityClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		NextAction: NewNextActionClient(cfg),
		Sukipi:     NewSukipiClient(cfg),
		University: NewUniversityClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		NextAction: NewNextActionClient(cfg),
		Sukipi:     NewSukipiClient(cfg),
		University: NewUniversityClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		NextAction.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.NextAction.Use(hooks...)
	c.Sukipi.Use(hooks...)
	c.University.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.NextAction.Intercept(interceptors...)
	c.Sukipi.Intercept(interceptors...)
	c.University.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *NextActionMutation:
		return c.NextAction.mutate(ctx, m)
	case *SukipiMutation:
		return c.Sukipi.mutate(ctx, m)
	case *UniversityMutation:
		return c.University.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// NextActionClient is a client for the NextAction schema.
type NextActionClient struct {
	config
}

// NewNextActionClient returns a client for the NextAction from the given config.
func NewNextActionClient(c config) *NextActionClient {
	return &NextActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nextaction.Hooks(f(g(h())))`.
func (c *NextActionClient) Use(hooks ...Hook) {
	c.hooks.NextAction = append(c.hooks.NextAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `nextaction.Intercept(f(g(h())))`.
func (c *NextActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.NextAction = append(c.inters.NextAction, interceptors...)
}

// Create returns a builder for creating a NextAction entity.
func (c *NextActionClient) Create() *NextActionCreate {
	mutation := newNextActionMutation(c.config, OpCreate)
	return &NextActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NextAction entities.
func (c *NextActionClient) CreateBulk(builders ...*NextActionCreate) *NextActionCreateBulk {
	return &NextActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NextActionClient) MapCreateBulk(slice any, setFunc func(*NextActionCreate, int)) *NextActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NextActionCreateBulk{err: fmt.Errorf("calling to NextActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NextActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NextActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NextAction.
func (c *NextActionClient) Update() *NextActionUpdate {
	mutation := newNextActionMutation(c.config, OpUpdate)
	return &NextActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NextActionClient) UpdateOne(na *NextAction) *NextActionUpdateOne {
	mutation := newNextActionMutation(c.config, OpUpdateOne, withNextAction(na))
	return &NextActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NextActionClient) UpdateOneID(id int) *NextActionUpdateOne {
	mutation := newNextActionMutation(c.config, OpUpdateOne, withNextActionID(id))
	return &NextActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NextAction.
func (c *NextActionClient) Delete() *NextActionDelete {
	mutation := newNextActionMutation(c.config, OpDelete)
	return &NextActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NextActionClient) DeleteOne(na *NextAction) *NextActionDeleteOne {
	return c.DeleteOneID(na.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NextActionClient) DeleteOneID(id int) *NextActionDeleteOne {
	builder := c.Delete().Where(nextaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NextActionDeleteOne{builder}
}

// Query returns a query builder for NextAction.
func (c *NextActionClient) Query() *NextActionQuery {
	return &NextActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNextAction},
		inters: c.Interceptors(),
	}
}

// Get returns a NextAction entity by its id.
func (c *NextActionClient) Get(ctx context.Context, id int) (*NextAction, error) {
	return c.Query().Where(nextaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NextActionClient) GetX(ctx context.Context, id int) *NextAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NextActionClient) Hooks() []Hook {
	return c.hooks.NextAction
}

// Interceptors returns the client interceptors.
func (c *NextActionClient) Interceptors() []Interceptor {
	return c.inters.NextAction
}

func (c *NextActionClient) mutate(ctx context.Context, m *NextActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NextActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NextActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NextActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NextActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NextAction mutation op: %q", m.Op())
	}
}

// SukipiClient is a client for the Sukipi schema.
type SukipiClient struct {
	config
}

// NewSukipiClient returns a client for the Sukipi from the given config.
func NewSukipiClient(c config) *SukipiClient {
	return &SukipiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sukipi.Hooks(f(g(h())))`.
func (c *SukipiClient) Use(hooks ...Hook) {
	c.hooks.Sukipi = append(c.hooks.Sukipi, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sukipi.Intercept(f(g(h())))`.
func (c *SukipiClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sukipi = append(c.inters.Sukipi, interceptors...)
}

// Create returns a builder for creating a Sukipi entity.
func (c *SukipiClient) Create() *SukipiCreate {
	mutation := newSukipiMutation(c.config, OpCreate)
	return &SukipiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sukipi entities.
func (c *SukipiClient) CreateBulk(builders ...*SukipiCreate) *SukipiCreateBulk {
	return &SukipiCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SukipiClient) MapCreateBulk(slice any, setFunc func(*SukipiCreate, int)) *SukipiCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SukipiCreateBulk{err: fmt.Errorf("calling to SukipiClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SukipiCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SukipiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sukipi.
func (c *SukipiClient) Update() *SukipiUpdate {
	mutation := newSukipiMutation(c.config, OpUpdate)
	return &SukipiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SukipiClient) UpdateOne(s *Sukipi) *SukipiUpdateOne {
	mutation := newSukipiMutation(c.config, OpUpdateOne, withSukipi(s))
	return &SukipiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SukipiClient) UpdateOneID(id int) *SukipiUpdateOne {
	mutation := newSukipiMutation(c.config, OpUpdateOne, withSukipiID(id))
	return &SukipiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sukipi.
func (c *SukipiClient) Delete() *SukipiDelete {
	mutation := newSukipiMutation(c.config, OpDelete)
	return &SukipiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SukipiClient) DeleteOne(s *Sukipi) *SukipiDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SukipiClient) DeleteOneID(id int) *SukipiDeleteOne {
	builder := c.Delete().Where(sukipi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SukipiDeleteOne{builder}
}

// Query returns a query builder for Sukipi.
func (c *SukipiClient) Query() *SukipiQuery {
	return &SukipiQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSukipi},
		inters: c.Interceptors(),
	}
}

// Get returns a Sukipi entity by its id.
func (c *SukipiClient) Get(ctx context.Context, id int) (*Sukipi, error) {
	return c.Query().Where(sukipi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SukipiClient) GetX(ctx context.Context, id int) *Sukipi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Sukipi.
func (c *SukipiClient) QueryUser(s *Sukipi) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sukipi.Table, sukipi.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sukipi.UserTable, sukipi.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SukipiClient) Hooks() []Hook {
	return c.hooks.Sukipi
}

// Interceptors returns the client interceptors.
func (c *SukipiClient) Interceptors() []Interceptor {
	return c.inters.Sukipi
}

func (c *SukipiClient) mutate(ctx context.Context, m *SukipiMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SukipiCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SukipiUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SukipiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SukipiDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sukipi mutation op: %q", m.Op())
	}
}

// UniversityClient is a client for the University schema.
type UniversityClient struct {
	config
}

// NewUniversityClient returns a client for the University from the given config.
func NewUniversityClient(c config) *UniversityClient {
	return &UniversityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `university.Hooks(f(g(h())))`.
func (c *UniversityClient) Use(hooks ...Hook) {
	c.hooks.University = append(c.hooks.University, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `university.Intercept(f(g(h())))`.
func (c *UniversityClient) Intercept(interceptors ...Interceptor) {
	c.inters.University = append(c.inters.University, interceptors...)
}

// Create returns a builder for creating a University entity.
func (c *UniversityClient) Create() *UniversityCreate {
	mutation := newUniversityMutation(c.config, OpCreate)
	return &UniversityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of University entities.
func (c *UniversityClient) CreateBulk(builders ...*UniversityCreate) *UniversityCreateBulk {
	return &UniversityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UniversityClient) MapCreateBulk(slice any, setFunc func(*UniversityCreate, int)) *UniversityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UniversityCreateBulk{err: fmt.Errorf("calling to UniversityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UniversityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UniversityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for University.
func (c *UniversityClient) Update() *UniversityUpdate {
	mutation := newUniversityMutation(c.config, OpUpdate)
	return &UniversityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UniversityClient) UpdateOne(u *University) *UniversityUpdateOne {
	mutation := newUniversityMutation(c.config, OpUpdateOne, withUniversity(u))
	return &UniversityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UniversityClient) UpdateOneID(id int) *UniversityUpdateOne {
	mutation := newUniversityMutation(c.config, OpUpdateOne, withUniversityID(id))
	return &UniversityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for University.
func (c *UniversityClient) Delete() *UniversityDelete {
	mutation := newUniversityMutation(c.config, OpDelete)
	return &UniversityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UniversityClient) DeleteOne(u *University) *UniversityDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UniversityClient) DeleteOneID(id int) *UniversityDeleteOne {
	builder := c.Delete().Where(university.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UniversityDeleteOne{builder}
}

// Query returns a query builder for University.
func (c *UniversityClient) Query() *UniversityQuery {
	return &UniversityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUniversity},
		inters: c.Interceptors(),
	}
}

// Get returns a University entity by its id.
func (c *UniversityClient) Get(ctx context.Context, id int) (*University, error) {
	return c.Query().Where(university.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UniversityClient) GetX(ctx context.Context, id int) *University {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UniversityClient) Hooks() []Hook {
	return c.hooks.University
}

// Interceptors returns the client interceptors.
func (c *UniversityClient) Interceptors() []Interceptor {
	return c.inters.University
}

func (c *UniversityClient) mutate(ctx context.Context, m *UniversityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UniversityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UniversityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UniversityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UniversityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown University mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySukipis queries the sukipis edge of a User.
func (c *UserClient) QuerySukipis(u *User) *SukipiQuery {
	query := (&SukipiClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sukipi.Table, sukipi.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.SukipisTable, user.SukipisColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		NextAction, Sukipi, University, User []ent.Hook
	}
	inters struct {
		NextAction, Sukipi, University, User []ent.Interceptor
	}
)
