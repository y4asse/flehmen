// Code generated by ent, DO NOT EDIT.

package specialevent

import (
	"flehmen-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLTE(FieldID, id))
}

// OccuredAt applies equality check predicate on the "occured_at" field. It's identical to OccuredAtEQ.
func OccuredAt(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldOccuredAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldTitle, v))
}

// DetailComment applies equality check predicate on the "detail_comment" field. It's identical to DetailCommentEQ.
func DetailComment(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldDetailComment, v))
}

// OccuredAtEQ applies the EQ predicate on the "occured_at" field.
func OccuredAtEQ(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldOccuredAt, v))
}

// OccuredAtNEQ applies the NEQ predicate on the "occured_at" field.
func OccuredAtNEQ(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNEQ(FieldOccuredAt, v))
}

// OccuredAtIn applies the In predicate on the "occured_at" field.
func OccuredAtIn(vs ...time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldIn(FieldOccuredAt, vs...))
}

// OccuredAtNotIn applies the NotIn predicate on the "occured_at" field.
func OccuredAtNotIn(vs ...time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNotIn(FieldOccuredAt, vs...))
}

// OccuredAtGT applies the GT predicate on the "occured_at" field.
func OccuredAtGT(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGT(FieldOccuredAt, v))
}

// OccuredAtGTE applies the GTE predicate on the "occured_at" field.
func OccuredAtGTE(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGTE(FieldOccuredAt, v))
}

// OccuredAtLT applies the LT predicate on the "occured_at" field.
func OccuredAtLT(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLT(FieldOccuredAt, v))
}

// OccuredAtLTE applies the LTE predicate on the "occured_at" field.
func OccuredAtLTE(v time.Time) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLTE(FieldOccuredAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldContainsFold(FieldTitle, v))
}

// DetailCommentEQ applies the EQ predicate on the "detail_comment" field.
func DetailCommentEQ(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEQ(FieldDetailComment, v))
}

// DetailCommentNEQ applies the NEQ predicate on the "detail_comment" field.
func DetailCommentNEQ(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNEQ(FieldDetailComment, v))
}

// DetailCommentIn applies the In predicate on the "detail_comment" field.
func DetailCommentIn(vs ...string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldIn(FieldDetailComment, vs...))
}

// DetailCommentNotIn applies the NotIn predicate on the "detail_comment" field.
func DetailCommentNotIn(vs ...string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldNotIn(FieldDetailComment, vs...))
}

// DetailCommentGT applies the GT predicate on the "detail_comment" field.
func DetailCommentGT(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGT(FieldDetailComment, v))
}

// DetailCommentGTE applies the GTE predicate on the "detail_comment" field.
func DetailCommentGTE(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldGTE(FieldDetailComment, v))
}

// DetailCommentLT applies the LT predicate on the "detail_comment" field.
func DetailCommentLT(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLT(FieldDetailComment, v))
}

// DetailCommentLTE applies the LTE predicate on the "detail_comment" field.
func DetailCommentLTE(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldLTE(FieldDetailComment, v))
}

// DetailCommentContains applies the Contains predicate on the "detail_comment" field.
func DetailCommentContains(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldContains(FieldDetailComment, v))
}

// DetailCommentHasPrefix applies the HasPrefix predicate on the "detail_comment" field.
func DetailCommentHasPrefix(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldHasPrefix(FieldDetailComment, v))
}

// DetailCommentHasSuffix applies the HasSuffix predicate on the "detail_comment" field.
func DetailCommentHasSuffix(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldHasSuffix(FieldDetailComment, v))
}

// DetailCommentEqualFold applies the EqualFold predicate on the "detail_comment" field.
func DetailCommentEqualFold(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldEqualFold(FieldDetailComment, v))
}

// DetailCommentContainsFold applies the ContainsFold predicate on the "detail_comment" field.
func DetailCommentContainsFold(v string) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.FieldContainsFold(FieldDetailComment, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SpecialEvent) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SpecialEvent) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SpecialEvent) predicate.SpecialEvent {
	return predicate.SpecialEvent(sql.NotPredicates(p))
}
