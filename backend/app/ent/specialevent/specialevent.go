// Code generated by ent, DO NOT EDIT.

package specialevent

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the specialevent type in the database.
	Label = "special_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOccuredAt holds the string denoting the occured_at field in the database.
	FieldOccuredAt = "occured_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDetailComment holds the string denoting the detail_comment field in the database.
	FieldDetailComment = "detail_comment"
	// Table holds the table name of the specialevent in the database.
	Table = "special_events"
)

// Columns holds all SQL columns for specialevent fields.
var Columns = []string{
	FieldID,
	FieldOccuredAt,
	FieldTitle,
	FieldDetailComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SpecialEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOccuredAt orders the results by the occured_at field.
func ByOccuredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccuredAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDetailComment orders the results by the detail_comment field.
func ByDetailComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetailComment, opts...).ToFunc()
}
