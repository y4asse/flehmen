// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/predicate"
	"flehmen-api/ent/specialevent"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpecialEventUpdate is the builder for updating SpecialEvent entities.
type SpecialEventUpdate struct {
	config
	hooks    []Hook
	mutation *SpecialEventMutation
}

// Where appends a list predicates to the SpecialEventUpdate builder.
func (seu *SpecialEventUpdate) Where(ps ...predicate.SpecialEvent) *SpecialEventUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetOccuredAt sets the "occured_at" field.
func (seu *SpecialEventUpdate) SetOccuredAt(t time.Time) *SpecialEventUpdate {
	seu.mutation.SetOccuredAt(t)
	return seu
}

// SetNillableOccuredAt sets the "occured_at" field if the given value is not nil.
func (seu *SpecialEventUpdate) SetNillableOccuredAt(t *time.Time) *SpecialEventUpdate {
	if t != nil {
		seu.SetOccuredAt(*t)
	}
	return seu
}

// SetTitle sets the "title" field.
func (seu *SpecialEventUpdate) SetTitle(s string) *SpecialEventUpdate {
	seu.mutation.SetTitle(s)
	return seu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (seu *SpecialEventUpdate) SetNillableTitle(s *string) *SpecialEventUpdate {
	if s != nil {
		seu.SetTitle(*s)
	}
	return seu
}

// SetDetailComment sets the "detail_comment" field.
func (seu *SpecialEventUpdate) SetDetailComment(s string) *SpecialEventUpdate {
	seu.mutation.SetDetailComment(s)
	return seu
}

// SetNillableDetailComment sets the "detail_comment" field if the given value is not nil.
func (seu *SpecialEventUpdate) SetNillableDetailComment(s *string) *SpecialEventUpdate {
	if s != nil {
		seu.SetDetailComment(*s)
	}
	return seu
}

// Mutation returns the SpecialEventMutation object of the builder.
func (seu *SpecialEventUpdate) Mutation() *SpecialEventMutation {
	return seu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SpecialEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SpecialEventUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SpecialEventUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SpecialEventUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seu *SpecialEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(specialevent.Table, specialevent.Columns, sqlgraph.NewFieldSpec(specialevent.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.OccuredAt(); ok {
		_spec.SetField(specialevent.FieldOccuredAt, field.TypeTime, value)
	}
	if value, ok := seu.mutation.Title(); ok {
		_spec.SetField(specialevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := seu.mutation.DetailComment(); ok {
		_spec.SetField(specialevent.FieldDetailComment, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SpecialEventUpdateOne is the builder for updating a single SpecialEvent entity.
type SpecialEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpecialEventMutation
}

// SetOccuredAt sets the "occured_at" field.
func (seuo *SpecialEventUpdateOne) SetOccuredAt(t time.Time) *SpecialEventUpdateOne {
	seuo.mutation.SetOccuredAt(t)
	return seuo
}

// SetNillableOccuredAt sets the "occured_at" field if the given value is not nil.
func (seuo *SpecialEventUpdateOne) SetNillableOccuredAt(t *time.Time) *SpecialEventUpdateOne {
	if t != nil {
		seuo.SetOccuredAt(*t)
	}
	return seuo
}

// SetTitle sets the "title" field.
func (seuo *SpecialEventUpdateOne) SetTitle(s string) *SpecialEventUpdateOne {
	seuo.mutation.SetTitle(s)
	return seuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (seuo *SpecialEventUpdateOne) SetNillableTitle(s *string) *SpecialEventUpdateOne {
	if s != nil {
		seuo.SetTitle(*s)
	}
	return seuo
}

// SetDetailComment sets the "detail_comment" field.
func (seuo *SpecialEventUpdateOne) SetDetailComment(s string) *SpecialEventUpdateOne {
	seuo.mutation.SetDetailComment(s)
	return seuo
}

// SetNillableDetailComment sets the "detail_comment" field if the given value is not nil.
func (seuo *SpecialEventUpdateOne) SetNillableDetailComment(s *string) *SpecialEventUpdateOne {
	if s != nil {
		seuo.SetDetailComment(*s)
	}
	return seuo
}

// Mutation returns the SpecialEventMutation object of the builder.
func (seuo *SpecialEventUpdateOne) Mutation() *SpecialEventMutation {
	return seuo.mutation
}

// Where appends a list predicates to the SpecialEventUpdate builder.
func (seuo *SpecialEventUpdateOne) Where(ps ...predicate.SpecialEvent) *SpecialEventUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SpecialEventUpdateOne) Select(field string, fields ...string) *SpecialEventUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SpecialEvent entity.
func (seuo *SpecialEventUpdateOne) Save(ctx context.Context) (*SpecialEvent, error) {
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SpecialEventUpdateOne) SaveX(ctx context.Context) *SpecialEvent {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SpecialEventUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SpecialEventUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seuo *SpecialEventUpdateOne) sqlSave(ctx context.Context) (_node *SpecialEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(specialevent.Table, specialevent.Columns, sqlgraph.NewFieldSpec(specialevent.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpecialEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, specialevent.FieldID)
		for _, f := range fields {
			if !specialevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != specialevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.OccuredAt(); ok {
		_spec.SetField(specialevent.FieldOccuredAt, field.TypeTime, value)
	}
	if value, ok := seuo.mutation.Title(); ok {
		_spec.SetField(specialevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := seuo.mutation.DetailComment(); ok {
		_spec.SetField(specialevent.FieldDetailComment, field.TypeString, value)
	}
	_node = &SpecialEvent{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
