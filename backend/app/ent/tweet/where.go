// Code generated by ent, DO NOT EDIT.

package tweet

import (
	"flehmen-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tweet {
	return predicate.Tweet(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldText, v))
}

// TweetID applies equality check predicate on the "tweet_id" field. It's identical to TweetIDEQ.
func TweetID(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldTweetID, v))
}

// TweetCreatedAt applies equality check predicate on the "tweet_created_at" field. It's identical to TweetCreatedAtEQ.
func TweetCreatedAt(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldTweetCreatedAt, v))
}

// ReplyTwitterUserID applies equality check predicate on the "reply_twitter_user_id" field. It's identical to ReplyTwitterUserIDEQ.
func ReplyTwitterUserID(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldReplyTwitterUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldCreatedAt, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Tweet {
	return predicate.Tweet(sql.FieldContainsFold(FieldText, v))
}

// TweetIDEQ applies the EQ predicate on the "tweet_id" field.
func TweetIDEQ(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldTweetID, v))
}

// TweetIDNEQ applies the NEQ predicate on the "tweet_id" field.
func TweetIDNEQ(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldTweetID, v))
}

// TweetIDIn applies the In predicate on the "tweet_id" field.
func TweetIDIn(vs ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldTweetID, vs...))
}

// TweetIDNotIn applies the NotIn predicate on the "tweet_id" field.
func TweetIDNotIn(vs ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldTweetID, vs...))
}

// TweetIDGT applies the GT predicate on the "tweet_id" field.
func TweetIDGT(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldGT(FieldTweetID, v))
}

// TweetIDGTE applies the GTE predicate on the "tweet_id" field.
func TweetIDGTE(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldGTE(FieldTweetID, v))
}

// TweetIDLT applies the LT predicate on the "tweet_id" field.
func TweetIDLT(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldLT(FieldTweetID, v))
}

// TweetIDLTE applies the LTE predicate on the "tweet_id" field.
func TweetIDLTE(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldLTE(FieldTweetID, v))
}

// TweetCreatedAtEQ applies the EQ predicate on the "tweet_created_at" field.
func TweetCreatedAtEQ(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldTweetCreatedAt, v))
}

// TweetCreatedAtNEQ applies the NEQ predicate on the "tweet_created_at" field.
func TweetCreatedAtNEQ(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldTweetCreatedAt, v))
}

// TweetCreatedAtIn applies the In predicate on the "tweet_created_at" field.
func TweetCreatedAtIn(vs ...time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldTweetCreatedAt, vs...))
}

// TweetCreatedAtNotIn applies the NotIn predicate on the "tweet_created_at" field.
func TweetCreatedAtNotIn(vs ...time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldTweetCreatedAt, vs...))
}

// TweetCreatedAtGT applies the GT predicate on the "tweet_created_at" field.
func TweetCreatedAtGT(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldGT(FieldTweetCreatedAt, v))
}

// TweetCreatedAtGTE applies the GTE predicate on the "tweet_created_at" field.
func TweetCreatedAtGTE(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldGTE(FieldTweetCreatedAt, v))
}

// TweetCreatedAtLT applies the LT predicate on the "tweet_created_at" field.
func TweetCreatedAtLT(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldLT(FieldTweetCreatedAt, v))
}

// TweetCreatedAtLTE applies the LTE predicate on the "tweet_created_at" field.
func TweetCreatedAtLTE(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldLTE(FieldTweetCreatedAt, v))
}

// ReplyTwitterUserIDEQ applies the EQ predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDEQ(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldReplyTwitterUserID, v))
}

// ReplyTwitterUserIDNEQ applies the NEQ predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDNEQ(v int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldReplyTwitterUserID, v))
}

// ReplyTwitterUserIDIn applies the In predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDIn(vs ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldReplyTwitterUserID, vs...))
}

// ReplyTwitterUserIDNotIn applies the NotIn predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDNotIn(vs ...int) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldReplyTwitterUserID, vs...))
}

// ReplyTwitterUserIDIsNil applies the IsNil predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDIsNil() predicate.Tweet {
	return predicate.Tweet(sql.FieldIsNull(FieldReplyTwitterUserID))
}

// ReplyTwitterUserIDNotNil applies the NotNil predicate on the "reply_twitter_user_id" field.
func ReplyTwitterUserIDNotNil() predicate.Tweet {
	return predicate.Tweet(sql.FieldNotNull(FieldReplyTwitterUserID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tweet {
	return predicate.Tweet(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Tweet {
	return predicate.Tweet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.TwitterUser) predicate.Tweet {
	return predicate.Tweet(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tweet) predicate.Tweet {
	return predicate.Tweet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tweet) predicate.Tweet {
	return predicate.Tweet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tweet) predicate.Tweet {
	return predicate.Tweet(sql.NotPredicates(p))
}
