// Code generated by ent, DO NOT EDIT.

package tweet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tweet type in the database.
	Label = "tweet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldTweetID holds the string denoting the tweet_id field in the database.
	FieldTweetID = "tweet_id"
	// FieldTweetCreatedAt holds the string denoting the tweet_created_at field in the database.
	FieldTweetCreatedAt = "tweet_created_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSukipi holds the string denoting the sukipi edge name in mutations.
	EdgeSukipi = "sukipi"
	// Table holds the table name of the tweet in the database.
	Table = "tweets"
	// SukipiTable is the table that holds the sukipi relation/edge.
	SukipiTable = "tweets"
	// SukipiInverseTable is the table name for the Sukipi entity.
	// It exists in this package in order to avoid circular dependency with the "sukipi" package.
	SukipiInverseTable = "sukipis"
	// SukipiColumn is the table column denoting the sukipi relation/edge.
	SukipiColumn = "sukipi_tweets"
)

// Columns holds all SQL columns for tweet fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldTweetID,
	FieldTweetCreatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tweets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sukipi_tweets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Tweet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByTweetID orders the results by the tweet_id field.
func ByTweetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTweetID, opts...).ToFunc()
}

// ByTweetCreatedAt orders the results by the tweet_created_at field.
func ByTweetCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTweetCreatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySukipiField orders the results by sukipi field.
func BySukipiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSukipiStep(), sql.OrderByField(field, opts...))
	}
}
func newSukipiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SukipiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SukipiTable, SukipiColumn),
	)
}
