// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/mbti"
	"flehmen-api/ent/predicate"
	"flehmen-api/ent/specialevent"
	"flehmen-api/ent/sukipi"
	"flehmen-api/ent/tweet"
	"flehmen-api/ent/twitteruser"
	"flehmen-api/ent/university"
	"flehmen-api/ent/user"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMbti         = "Mbti"
	TypeSpecialEvent = "SpecialEvent"
	TypeSukipi       = "Sukipi"
	TypeTweet        = "Tweet"
	TypeTwitterUser  = "TwitterUser"
	TypeUniversity   = "University"
	TypeUser         = "User"
)

// MbtiMutation represents an operation that mutates the Mbti nodes in the graph.
type MbtiMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Mbti, error)
	predicates    []predicate.Mbti
}

var _ ent.Mutation = (*MbtiMutation)(nil)

// mbtiOption allows management of the mutation configuration using functional options.
type mbtiOption func(*MbtiMutation)

// newMbtiMutation creates new mutation for the Mbti entity.
func newMbtiMutation(c config, op Op, opts ...mbtiOption) *MbtiMutation {
	m := &MbtiMutation{
		config:        c,
		op:            op,
		typ:           TypeMbti,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMbtiID sets the ID field of the mutation.
func withMbtiID(id int) mbtiOption {
	return func(m *MbtiMutation) {
		var (
			err   error
			once  sync.Once
			value *Mbti
		)
		m.oldValue = func(ctx context.Context) (*Mbti, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mbti.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMbti sets the old Mbti of the mutation.
func withMbti(node *Mbti) mbtiOption {
	return func(m *MbtiMutation) {
		m.oldValue = func(context.Context) (*Mbti, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MbtiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MbtiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MbtiMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MbtiMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mbti.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *MbtiMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MbtiMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Mbti entity.
// If the Mbti object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MbtiMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MbtiMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MbtiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MbtiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Mbti entity.
// If the Mbti object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MbtiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MbtiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the MbtiMutation builder.
func (m *MbtiMutation) Where(ps ...predicate.Mbti) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MbtiMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MbtiMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Mbti, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MbtiMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MbtiMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Mbti).
func (m *MbtiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MbtiMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._type != nil {
		fields = append(fields, mbti.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, mbti.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MbtiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mbti.FieldType:
		return m.GetType()
	case mbti.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MbtiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mbti.FieldType:
		return m.OldType(ctx)
	case mbti.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Mbti field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MbtiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mbti.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case mbti.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Mbti field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MbtiMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MbtiMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MbtiMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Mbti numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MbtiMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MbtiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MbtiMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mbti nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MbtiMutation) ResetField(name string) error {
	switch name {
	case mbti.FieldType:
		m.ResetType()
		return nil
	case mbti.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Mbti field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MbtiMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MbtiMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MbtiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MbtiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MbtiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MbtiMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MbtiMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Mbti unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MbtiMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Mbti edge %s", name)
}

// SpecialEventMutation represents an operation that mutates the SpecialEvent nodes in the graph.
type SpecialEventMutation struct {
	config
	op             Op
	typ            string
	id             *int
	occured_at     *time.Time
	title          *string
	detail_comment *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SpecialEvent, error)
	predicates     []predicate.SpecialEvent
}

var _ ent.Mutation = (*SpecialEventMutation)(nil)

// specialeventOption allows management of the mutation configuration using functional options.
type specialeventOption func(*SpecialEventMutation)

// newSpecialEventMutation creates new mutation for the SpecialEvent entity.
func newSpecialEventMutation(c config, op Op, opts ...specialeventOption) *SpecialEventMutation {
	m := &SpecialEventMutation{
		config:        c,
		op:            op,
		typ:           TypeSpecialEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpecialEventID sets the ID field of the mutation.
func withSpecialEventID(id int) specialeventOption {
	return func(m *SpecialEventMutation) {
		var (
			err   error
			once  sync.Once
			value *SpecialEvent
		)
		m.oldValue = func(ctx context.Context) (*SpecialEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SpecialEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpecialEvent sets the old SpecialEvent of the mutation.
func withSpecialEvent(node *SpecialEvent) specialeventOption {
	return func(m *SpecialEventMutation) {
		m.oldValue = func(context.Context) (*SpecialEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpecialEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpecialEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SpecialEventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SpecialEventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SpecialEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOccuredAt sets the "occured_at" field.
func (m *SpecialEventMutation) SetOccuredAt(t time.Time) {
	m.occured_at = &t
}

// OccuredAt returns the value of the "occured_at" field in the mutation.
func (m *SpecialEventMutation) OccuredAt() (r time.Time, exists bool) {
	v := m.occured_at
	if v == nil {
		return
	}
	return *v, true
}

// OldOccuredAt returns the old "occured_at" field's value of the SpecialEvent entity.
// If the SpecialEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpecialEventMutation) OldOccuredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccuredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccuredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccuredAt: %w", err)
	}
	return oldValue.OccuredAt, nil
}

// ResetOccuredAt resets all changes to the "occured_at" field.
func (m *SpecialEventMutation) ResetOccuredAt() {
	m.occured_at = nil
}

// SetTitle sets the "title" field.
func (m *SpecialEventMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SpecialEventMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SpecialEvent entity.
// If the SpecialEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpecialEventMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SpecialEventMutation) ResetTitle() {
	m.title = nil
}

// SetDetailComment sets the "detail_comment" field.
func (m *SpecialEventMutation) SetDetailComment(s string) {
	m.detail_comment = &s
}

// DetailComment returns the value of the "detail_comment" field in the mutation.
func (m *SpecialEventMutation) DetailComment() (r string, exists bool) {
	v := m.detail_comment
	if v == nil {
		return
	}
	return *v, true
}

// OldDetailComment returns the old "detail_comment" field's value of the SpecialEvent entity.
// If the SpecialEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SpecialEventMutation) OldDetailComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetailComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetailComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetailComment: %w", err)
	}
	return oldValue.DetailComment, nil
}

// ResetDetailComment resets all changes to the "detail_comment" field.
func (m *SpecialEventMutation) ResetDetailComment() {
	m.detail_comment = nil
}

// Where appends a list predicates to the SpecialEventMutation builder.
func (m *SpecialEventMutation) Where(ps ...predicate.SpecialEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SpecialEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SpecialEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SpecialEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SpecialEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SpecialEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SpecialEvent).
func (m *SpecialEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SpecialEventMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.occured_at != nil {
		fields = append(fields, specialevent.FieldOccuredAt)
	}
	if m.title != nil {
		fields = append(fields, specialevent.FieldTitle)
	}
	if m.detail_comment != nil {
		fields = append(fields, specialevent.FieldDetailComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SpecialEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case specialevent.FieldOccuredAt:
		return m.OccuredAt()
	case specialevent.FieldTitle:
		return m.Title()
	case specialevent.FieldDetailComment:
		return m.DetailComment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SpecialEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case specialevent.FieldOccuredAt:
		return m.OldOccuredAt(ctx)
	case specialevent.FieldTitle:
		return m.OldTitle(ctx)
	case specialevent.FieldDetailComment:
		return m.OldDetailComment(ctx)
	}
	return nil, fmt.Errorf("unknown SpecialEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case specialevent.FieldOccuredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccuredAt(v)
		return nil
	case specialevent.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case specialevent.FieldDetailComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetailComment(v)
		return nil
	}
	return fmt.Errorf("unknown SpecialEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SpecialEventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SpecialEventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SpecialEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SpecialEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SpecialEventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SpecialEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpecialEventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SpecialEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SpecialEventMutation) ResetField(name string) error {
	switch name {
	case specialevent.FieldOccuredAt:
		m.ResetOccuredAt()
		return nil
	case specialevent.FieldTitle:
		m.ResetTitle()
		return nil
	case specialevent.FieldDetailComment:
		m.ResetDetailComment()
		return nil
	}
	return fmt.Errorf("unknown SpecialEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SpecialEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SpecialEventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SpecialEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SpecialEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SpecialEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SpecialEventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SpecialEventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SpecialEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SpecialEventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SpecialEvent edge %s", name)
}

// SukipiMutation represents an operation that mutates the Sukipi nodes in the graph.
type SukipiMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	weight         *float64
	addweight      *float64
	height         *float64
	addheight      *float64
	x_id           *string
	hobby          *string
	birthday       *time.Time
	shoesSize      *string
	family         *string
	nearly_station *string
	liked_at       *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	mbti           *int
	clearedmbti    bool
	tweets         map[int]struct{}
	removedtweets  map[int]struct{}
	clearedtweets  bool
	done           bool
	oldValue       func(context.Context) (*Sukipi, error)
	predicates     []predicate.Sukipi
}

var _ ent.Mutation = (*SukipiMutation)(nil)

// sukipiOption allows management of the mutation configuration using functional options.
type sukipiOption func(*SukipiMutation)

// newSukipiMutation creates new mutation for the Sukipi entity.
func newSukipiMutation(c config, op Op, opts ...sukipiOption) *SukipiMutation {
	m := &SukipiMutation{
		config:        c,
		op:            op,
		typ:           TypeSukipi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSukipiID sets the ID field of the mutation.
func withSukipiID(id int) sukipiOption {
	return func(m *SukipiMutation) {
		var (
			err   error
			once  sync.Once
			value *Sukipi
		)
		m.oldValue = func(ctx context.Context) (*Sukipi, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sukipi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSukipi sets the old Sukipi of the mutation.
func withSukipi(node *Sukipi) sukipiOption {
	return func(m *SukipiMutation) {
		m.oldValue = func(context.Context) (*Sukipi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SukipiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SukipiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SukipiMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SukipiMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sukipi.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SukipiMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SukipiMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SukipiMutation) ResetName() {
	m.name = nil
}

// SetWeight sets the "weight" field.
func (m *SukipiMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *SukipiMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *SukipiMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *SukipiMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *SukipiMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[sukipi.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *SukipiMutation) WeightCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *SukipiMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, sukipi.FieldWeight)
}

// SetHeight sets the "height" field.
func (m *SukipiMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *SukipiMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldHeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *SukipiMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *SukipiMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeight clears the value of the "height" field.
func (m *SukipiMutation) ClearHeight() {
	m.height = nil
	m.addheight = nil
	m.clearedFields[sukipi.FieldHeight] = struct{}{}
}

// HeightCleared returns if the "height" field was cleared in this mutation.
func (m *SukipiMutation) HeightCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldHeight]
	return ok
}

// ResetHeight resets all changes to the "height" field.
func (m *SukipiMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
	delete(m.clearedFields, sukipi.FieldHeight)
}

// SetXID sets the "x_id" field.
func (m *SukipiMutation) SetXID(s string) {
	m.x_id = &s
}

// XID returns the value of the "x_id" field in the mutation.
func (m *SukipiMutation) XID() (r string, exists bool) {
	v := m.x_id
	if v == nil {
		return
	}
	return *v, true
}

// OldXID returns the old "x_id" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldXID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXID: %w", err)
	}
	return oldValue.XID, nil
}

// ClearXID clears the value of the "x_id" field.
func (m *SukipiMutation) ClearXID() {
	m.x_id = nil
	m.clearedFields[sukipi.FieldXID] = struct{}{}
}

// XIDCleared returns if the "x_id" field was cleared in this mutation.
func (m *SukipiMutation) XIDCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldXID]
	return ok
}

// ResetXID resets all changes to the "x_id" field.
func (m *SukipiMutation) ResetXID() {
	m.x_id = nil
	delete(m.clearedFields, sukipi.FieldXID)
}

// SetHobby sets the "hobby" field.
func (m *SukipiMutation) SetHobby(s string) {
	m.hobby = &s
}

// Hobby returns the value of the "hobby" field in the mutation.
func (m *SukipiMutation) Hobby() (r string, exists bool) {
	v := m.hobby
	if v == nil {
		return
	}
	return *v, true
}

// OldHobby returns the old "hobby" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldHobby(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHobby is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHobby requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHobby: %w", err)
	}
	return oldValue.Hobby, nil
}

// ClearHobby clears the value of the "hobby" field.
func (m *SukipiMutation) ClearHobby() {
	m.hobby = nil
	m.clearedFields[sukipi.FieldHobby] = struct{}{}
}

// HobbyCleared returns if the "hobby" field was cleared in this mutation.
func (m *SukipiMutation) HobbyCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldHobby]
	return ok
}

// ResetHobby resets all changes to the "hobby" field.
func (m *SukipiMutation) ResetHobby() {
	m.hobby = nil
	delete(m.clearedFields, sukipi.FieldHobby)
}

// SetBirthday sets the "birthday" field.
func (m *SukipiMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *SukipiMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldBirthday(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *SukipiMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[sukipi.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *SukipiMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *SukipiMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, sukipi.FieldBirthday)
}

// SetShoesSize sets the "shoesSize" field.
func (m *SukipiMutation) SetShoesSize(s string) {
	m.shoesSize = &s
}

// ShoesSize returns the value of the "shoesSize" field in the mutation.
func (m *SukipiMutation) ShoesSize() (r string, exists bool) {
	v := m.shoesSize
	if v == nil {
		return
	}
	return *v, true
}

// OldShoesSize returns the old "shoesSize" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldShoesSize(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShoesSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShoesSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoesSize: %w", err)
	}
	return oldValue.ShoesSize, nil
}

// ClearShoesSize clears the value of the "shoesSize" field.
func (m *SukipiMutation) ClearShoesSize() {
	m.shoesSize = nil
	m.clearedFields[sukipi.FieldShoesSize] = struct{}{}
}

// ShoesSizeCleared returns if the "shoesSize" field was cleared in this mutation.
func (m *SukipiMutation) ShoesSizeCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldShoesSize]
	return ok
}

// ResetShoesSize resets all changes to the "shoesSize" field.
func (m *SukipiMutation) ResetShoesSize() {
	m.shoesSize = nil
	delete(m.clearedFields, sukipi.FieldShoesSize)
}

// SetFamily sets the "family" field.
func (m *SukipiMutation) SetFamily(s string) {
	m.family = &s
}

// Family returns the value of the "family" field in the mutation.
func (m *SukipiMutation) Family() (r string, exists bool) {
	v := m.family
	if v == nil {
		return
	}
	return *v, true
}

// OldFamily returns the old "family" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldFamily(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamily is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamily requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamily: %w", err)
	}
	return oldValue.Family, nil
}

// ClearFamily clears the value of the "family" field.
func (m *SukipiMutation) ClearFamily() {
	m.family = nil
	m.clearedFields[sukipi.FieldFamily] = struct{}{}
}

// FamilyCleared returns if the "family" field was cleared in this mutation.
func (m *SukipiMutation) FamilyCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldFamily]
	return ok
}

// ResetFamily resets all changes to the "family" field.
func (m *SukipiMutation) ResetFamily() {
	m.family = nil
	delete(m.clearedFields, sukipi.FieldFamily)
}

// SetNearlyStation sets the "nearly_station" field.
func (m *SukipiMutation) SetNearlyStation(s string) {
	m.nearly_station = &s
}

// NearlyStation returns the value of the "nearly_station" field in the mutation.
func (m *SukipiMutation) NearlyStation() (r string, exists bool) {
	v := m.nearly_station
	if v == nil {
		return
	}
	return *v, true
}

// OldNearlyStation returns the old "nearly_station" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldNearlyStation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNearlyStation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNearlyStation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNearlyStation: %w", err)
	}
	return oldValue.NearlyStation, nil
}

// ClearNearlyStation clears the value of the "nearly_station" field.
func (m *SukipiMutation) ClearNearlyStation() {
	m.nearly_station = nil
	m.clearedFields[sukipi.FieldNearlyStation] = struct{}{}
}

// NearlyStationCleared returns if the "nearly_station" field was cleared in this mutation.
func (m *SukipiMutation) NearlyStationCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldNearlyStation]
	return ok
}

// ResetNearlyStation resets all changes to the "nearly_station" field.
func (m *SukipiMutation) ResetNearlyStation() {
	m.nearly_station = nil
	delete(m.clearedFields, sukipi.FieldNearlyStation)
}

// SetLikedAt sets the "liked_at" field.
func (m *SukipiMutation) SetLikedAt(t time.Time) {
	m.liked_at = &t
}

// LikedAt returns the value of the "liked_at" field in the mutation.
func (m *SukipiMutation) LikedAt() (r time.Time, exists bool) {
	v := m.liked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLikedAt returns the old "liked_at" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldLikedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikedAt: %w", err)
	}
	return oldValue.LikedAt, nil
}

// ResetLikedAt resets all changes to the "liked_at" field.
func (m *SukipiMutation) ResetLikedAt() {
	m.liked_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SukipiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SukipiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SukipiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMbtiID sets the "mbti" edge to the Mbti entity by id.
func (m *SukipiMutation) SetMbtiID(id int) {
	m.mbti = &id
}

// ClearMbti clears the "mbti" edge to the Mbti entity.
func (m *SukipiMutation) ClearMbti() {
	m.clearedmbti = true
}

// MbtiCleared reports if the "mbti" edge to the Mbti entity was cleared.
func (m *SukipiMutation) MbtiCleared() bool {
	return m.clearedmbti
}

// MbtiID returns the "mbti" edge ID in the mutation.
func (m *SukipiMutation) MbtiID() (id int, exists bool) {
	if m.mbti != nil {
		return *m.mbti, true
	}
	return
}

// MbtiIDs returns the "mbti" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MbtiID instead. It exists only for internal usage by the builders.
func (m *SukipiMutation) MbtiIDs() (ids []int) {
	if id := m.mbti; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMbti resets all changes to the "mbti" edge.
func (m *SukipiMutation) ResetMbti() {
	m.mbti = nil
	m.clearedmbti = false
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by ids.
func (m *SukipiMutation) AddTweetIDs(ids ...int) {
	if m.tweets == nil {
		m.tweets = make(map[int]struct{})
	}
	for i := range ids {
		m.tweets[ids[i]] = struct{}{}
	}
}

// ClearTweets clears the "tweets" edge to the Tweet entity.
func (m *SukipiMutation) ClearTweets() {
	m.clearedtweets = true
}

// TweetsCleared reports if the "tweets" edge to the Tweet entity was cleared.
func (m *SukipiMutation) TweetsCleared() bool {
	return m.clearedtweets
}

// RemoveTweetIDs removes the "tweets" edge to the Tweet entity by IDs.
func (m *SukipiMutation) RemoveTweetIDs(ids ...int) {
	if m.removedtweets == nil {
		m.removedtweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tweets, ids[i])
		m.removedtweets[ids[i]] = struct{}{}
	}
}

// RemovedTweets returns the removed IDs of the "tweets" edge to the Tweet entity.
func (m *SukipiMutation) RemovedTweetsIDs() (ids []int) {
	for id := range m.removedtweets {
		ids = append(ids, id)
	}
	return
}

// TweetsIDs returns the "tweets" edge IDs in the mutation.
func (m *SukipiMutation) TweetsIDs() (ids []int) {
	for id := range m.tweets {
		ids = append(ids, id)
	}
	return
}

// ResetTweets resets all changes to the "tweets" edge.
func (m *SukipiMutation) ResetTweets() {
	m.tweets = nil
	m.clearedtweets = false
	m.removedtweets = nil
}

// Where appends a list predicates to the SukipiMutation builder.
func (m *SukipiMutation) Where(ps ...predicate.Sukipi) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SukipiMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SukipiMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sukipi, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SukipiMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SukipiMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sukipi).
func (m *SukipiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SukipiMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, sukipi.FieldName)
	}
	if m.weight != nil {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, sukipi.FieldHeight)
	}
	if m.x_id != nil {
		fields = append(fields, sukipi.FieldXID)
	}
	if m.hobby != nil {
		fields = append(fields, sukipi.FieldHobby)
	}
	if m.birthday != nil {
		fields = append(fields, sukipi.FieldBirthday)
	}
	if m.shoesSize != nil {
		fields = append(fields, sukipi.FieldShoesSize)
	}
	if m.family != nil {
		fields = append(fields, sukipi.FieldFamily)
	}
	if m.nearly_station != nil {
		fields = append(fields, sukipi.FieldNearlyStation)
	}
	if m.liked_at != nil {
		fields = append(fields, sukipi.FieldLikedAt)
	}
	if m.created_at != nil {
		fields = append(fields, sukipi.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SukipiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sukipi.FieldName:
		return m.Name()
	case sukipi.FieldWeight:
		return m.Weight()
	case sukipi.FieldHeight:
		return m.Height()
	case sukipi.FieldXID:
		return m.XID()
	case sukipi.FieldHobby:
		return m.Hobby()
	case sukipi.FieldBirthday:
		return m.Birthday()
	case sukipi.FieldShoesSize:
		return m.ShoesSize()
	case sukipi.FieldFamily:
		return m.Family()
	case sukipi.FieldNearlyStation:
		return m.NearlyStation()
	case sukipi.FieldLikedAt:
		return m.LikedAt()
	case sukipi.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SukipiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sukipi.FieldName:
		return m.OldName(ctx)
	case sukipi.FieldWeight:
		return m.OldWeight(ctx)
	case sukipi.FieldHeight:
		return m.OldHeight(ctx)
	case sukipi.FieldXID:
		return m.OldXID(ctx)
	case sukipi.FieldHobby:
		return m.OldHobby(ctx)
	case sukipi.FieldBirthday:
		return m.OldBirthday(ctx)
	case sukipi.FieldShoesSize:
		return m.OldShoesSize(ctx)
	case sukipi.FieldFamily:
		return m.OldFamily(ctx)
	case sukipi.FieldNearlyStation:
		return m.OldNearlyStation(ctx)
	case sukipi.FieldLikedAt:
		return m.OldLikedAt(ctx)
	case sukipi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Sukipi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SukipiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sukipi.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sukipi.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case sukipi.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case sukipi.FieldXID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXID(v)
		return nil
	case sukipi.FieldHobby:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHobby(v)
		return nil
	case sukipi.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case sukipi.FieldShoesSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoesSize(v)
		return nil
	case sukipi.FieldFamily:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamily(v)
		return nil
	case sukipi.FieldNearlyStation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNearlyStation(v)
		return nil
	case sukipi.FieldLikedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikedAt(v)
		return nil
	case sukipi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Sukipi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SukipiMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, sukipi.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SukipiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sukipi.FieldWeight:
		return m.AddedWeight()
	case sukipi.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SukipiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sukipi.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case sukipi.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Sukipi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SukipiMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sukipi.FieldWeight) {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.FieldCleared(sukipi.FieldHeight) {
		fields = append(fields, sukipi.FieldHeight)
	}
	if m.FieldCleared(sukipi.FieldXID) {
		fields = append(fields, sukipi.FieldXID)
	}
	if m.FieldCleared(sukipi.FieldHobby) {
		fields = append(fields, sukipi.FieldHobby)
	}
	if m.FieldCleared(sukipi.FieldBirthday) {
		fields = append(fields, sukipi.FieldBirthday)
	}
	if m.FieldCleared(sukipi.FieldShoesSize) {
		fields = append(fields, sukipi.FieldShoesSize)
	}
	if m.FieldCleared(sukipi.FieldFamily) {
		fields = append(fields, sukipi.FieldFamily)
	}
	if m.FieldCleared(sukipi.FieldNearlyStation) {
		fields = append(fields, sukipi.FieldNearlyStation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SukipiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SukipiMutation) ClearField(name string) error {
	switch name {
	case sukipi.FieldWeight:
		m.ClearWeight()
		return nil
	case sukipi.FieldHeight:
		m.ClearHeight()
		return nil
	case sukipi.FieldXID:
		m.ClearXID()
		return nil
	case sukipi.FieldHobby:
		m.ClearHobby()
		return nil
	case sukipi.FieldBirthday:
		m.ClearBirthday()
		return nil
	case sukipi.FieldShoesSize:
		m.ClearShoesSize()
		return nil
	case sukipi.FieldFamily:
		m.ClearFamily()
		return nil
	case sukipi.FieldNearlyStation:
		m.ClearNearlyStation()
		return nil
	}
	return fmt.Errorf("unknown Sukipi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SukipiMutation) ResetField(name string) error {
	switch name {
	case sukipi.FieldName:
		m.ResetName()
		return nil
	case sukipi.FieldWeight:
		m.ResetWeight()
		return nil
	case sukipi.FieldHeight:
		m.ResetHeight()
		return nil
	case sukipi.FieldXID:
		m.ResetXID()
		return nil
	case sukipi.FieldHobby:
		m.ResetHobby()
		return nil
	case sukipi.FieldBirthday:
		m.ResetBirthday()
		return nil
	case sukipi.FieldShoesSize:
		m.ResetShoesSize()
		return nil
	case sukipi.FieldFamily:
		m.ResetFamily()
		return nil
	case sukipi.FieldNearlyStation:
		m.ResetNearlyStation()
		return nil
	case sukipi.FieldLikedAt:
		m.ResetLikedAt()
		return nil
	case sukipi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Sukipi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SukipiMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mbti != nil {
		edges = append(edges, sukipi.EdgeMbti)
	}
	if m.tweets != nil {
		edges = append(edges, sukipi.EdgeTweets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SukipiMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sukipi.EdgeMbti:
		if id := m.mbti; id != nil {
			return []ent.Value{*id}
		}
	case sukipi.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.tweets))
		for id := range m.tweets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SukipiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtweets != nil {
		edges = append(edges, sukipi.EdgeTweets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SukipiMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sukipi.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.removedtweets))
		for id := range m.removedtweets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SukipiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmbti {
		edges = append(edges, sukipi.EdgeMbti)
	}
	if m.clearedtweets {
		edges = append(edges, sukipi.EdgeTweets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SukipiMutation) EdgeCleared(name string) bool {
	switch name {
	case sukipi.EdgeMbti:
		return m.clearedmbti
	case sukipi.EdgeTweets:
		return m.clearedtweets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SukipiMutation) ClearEdge(name string) error {
	switch name {
	case sukipi.EdgeMbti:
		m.ClearMbti()
		return nil
	}
	return fmt.Errorf("unknown Sukipi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SukipiMutation) ResetEdge(name string) error {
	switch name {
	case sukipi.EdgeMbti:
		m.ResetMbti()
		return nil
	case sukipi.EdgeTweets:
		m.ResetTweets()
		return nil
	}
	return fmt.Errorf("unknown Sukipi edge %s", name)
}

// TweetMutation represents an operation that mutates the Tweet nodes in the graph.
type TweetMutation struct {
	config
	op               Op
	typ              string
	id               *int
	text             *string
	tweet_id         *int
	addtweet_id      *int
	tweet_created_at *time.Time
	created_at       *time.Time
	clearedFields    map[string]struct{}
	user             *int
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*Tweet, error)
	predicates       []predicate.Tweet
}

var _ ent.Mutation = (*TweetMutation)(nil)

// tweetOption allows management of the mutation configuration using functional options.
type tweetOption func(*TweetMutation)

// newTweetMutation creates new mutation for the Tweet entity.
func newTweetMutation(c config, op Op, opts ...tweetOption) *TweetMutation {
	m := &TweetMutation{
		config:        c,
		op:            op,
		typ:           TypeTweet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTweetID sets the ID field of the mutation.
func withTweetID(id int) tweetOption {
	return func(m *TweetMutation) {
		var (
			err   error
			once  sync.Once
			value *Tweet
		)
		m.oldValue = func(ctx context.Context) (*Tweet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tweet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTweet sets the old Tweet of the mutation.
func withTweet(node *Tweet) tweetOption {
	return func(m *TweetMutation) {
		m.oldValue = func(context.Context) (*Tweet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TweetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TweetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TweetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TweetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tweet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *TweetMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TweetMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *TweetMutation) ResetText() {
	m.text = nil
}

// SetTweetID sets the "tweet_id" field.
func (m *TweetMutation) SetTweetID(i int) {
	m.tweet_id = &i
	m.addtweet_id = nil
}

// TweetID returns the value of the "tweet_id" field in the mutation.
func (m *TweetMutation) TweetID() (r int, exists bool) {
	v := m.tweet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTweetID returns the old "tweet_id" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldTweetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTweetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTweetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTweetID: %w", err)
	}
	return oldValue.TweetID, nil
}

// AddTweetID adds i to the "tweet_id" field.
func (m *TweetMutation) AddTweetID(i int) {
	if m.addtweet_id != nil {
		*m.addtweet_id += i
	} else {
		m.addtweet_id = &i
	}
}

// AddedTweetID returns the value that was added to the "tweet_id" field in this mutation.
func (m *TweetMutation) AddedTweetID() (r int, exists bool) {
	v := m.addtweet_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTweetID resets all changes to the "tweet_id" field.
func (m *TweetMutation) ResetTweetID() {
	m.tweet_id = nil
	m.addtweet_id = nil
}

// SetTweetCreatedAt sets the "tweet_created_at" field.
func (m *TweetMutation) SetTweetCreatedAt(t time.Time) {
	m.tweet_created_at = &t
}

// TweetCreatedAt returns the value of the "tweet_created_at" field in the mutation.
func (m *TweetMutation) TweetCreatedAt() (r time.Time, exists bool) {
	v := m.tweet_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTweetCreatedAt returns the old "tweet_created_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldTweetCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTweetCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTweetCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTweetCreatedAt: %w", err)
	}
	return oldValue.TweetCreatedAt, nil
}

// ResetTweetCreatedAt resets all changes to the "tweet_created_at" field.
func (m *TweetMutation) ResetTweetCreatedAt() {
	m.tweet_created_at = nil
}

// SetReplyTwitterUserID sets the "reply_twitter_user_id" field.
func (m *TweetMutation) SetReplyTwitterUserID(i int) {
	m.user = &i
}

// ReplyTwitterUserID returns the value of the "reply_twitter_user_id" field in the mutation.
func (m *TweetMutation) ReplyTwitterUserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyTwitterUserID returns the old "reply_twitter_user_id" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldReplyTwitterUserID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplyTwitterUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplyTwitterUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyTwitterUserID: %w", err)
	}
	return oldValue.ReplyTwitterUserID, nil
}

// ClearReplyTwitterUserID clears the value of the "reply_twitter_user_id" field.
func (m *TweetMutation) ClearReplyTwitterUserID() {
	m.user = nil
	m.clearedFields[tweet.FieldReplyTwitterUserID] = struct{}{}
}

// ReplyTwitterUserIDCleared returns if the "reply_twitter_user_id" field was cleared in this mutation.
func (m *TweetMutation) ReplyTwitterUserIDCleared() bool {
	_, ok := m.clearedFields[tweet.FieldReplyTwitterUserID]
	return ok
}

// ResetReplyTwitterUserID resets all changes to the "reply_twitter_user_id" field.
func (m *TweetMutation) ResetReplyTwitterUserID() {
	m.user = nil
	delete(m.clearedFields, tweet.FieldReplyTwitterUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *TweetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TweetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TweetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the TwitterUser entity by id.
func (m *TweetMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the TwitterUser entity.
func (m *TweetMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[tweet.FieldReplyTwitterUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the TwitterUser entity was cleared.
func (m *TweetMutation) UserCleared() bool {
	return m.ReplyTwitterUserIDCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TweetMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TweetMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TweetMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the TweetMutation builder.
func (m *TweetMutation) Where(ps ...predicate.Tweet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TweetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TweetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tweet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TweetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TweetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tweet).
func (m *TweetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TweetMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.text != nil {
		fields = append(fields, tweet.FieldText)
	}
	if m.tweet_id != nil {
		fields = append(fields, tweet.FieldTweetID)
	}
	if m.tweet_created_at != nil {
		fields = append(fields, tweet.FieldTweetCreatedAt)
	}
	if m.user != nil {
		fields = append(fields, tweet.FieldReplyTwitterUserID)
	}
	if m.created_at != nil {
		fields = append(fields, tweet.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TweetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldText:
		return m.Text()
	case tweet.FieldTweetID:
		return m.TweetID()
	case tweet.FieldTweetCreatedAt:
		return m.TweetCreatedAt()
	case tweet.FieldReplyTwitterUserID:
		return m.ReplyTwitterUserID()
	case tweet.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TweetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tweet.FieldText:
		return m.OldText(ctx)
	case tweet.FieldTweetID:
		return m.OldTweetID(ctx)
	case tweet.FieldTweetCreatedAt:
		return m.OldTweetCreatedAt(ctx)
	case tweet.FieldReplyTwitterUserID:
		return m.OldReplyTwitterUserID(ctx)
	case tweet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Tweet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case tweet.FieldTweetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTweetID(v)
		return nil
	case tweet.FieldTweetCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTweetCreatedAt(v)
		return nil
	case tweet.FieldReplyTwitterUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyTwitterUserID(v)
		return nil
	case tweet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TweetMutation) AddedFields() []string {
	var fields []string
	if m.addtweet_id != nil {
		fields = append(fields, tweet.FieldTweetID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TweetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldTweetID:
		return m.AddedTweetID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldTweetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTweetID(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TweetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tweet.FieldReplyTwitterUserID) {
		fields = append(fields, tweet.FieldReplyTwitterUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TweetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TweetMutation) ClearField(name string) error {
	switch name {
	case tweet.FieldReplyTwitterUserID:
		m.ClearReplyTwitterUserID()
		return nil
	}
	return fmt.Errorf("unknown Tweet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TweetMutation) ResetField(name string) error {
	switch name {
	case tweet.FieldText:
		m.ResetText()
		return nil
	case tweet.FieldTweetID:
		m.ResetTweetID()
		return nil
	case tweet.FieldTweetCreatedAt:
		m.ResetTweetCreatedAt()
		return nil
	case tweet.FieldReplyTwitterUserID:
		m.ResetReplyTwitterUserID()
		return nil
	case tweet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TweetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, tweet.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TweetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TweetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TweetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TweetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, tweet.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TweetMutation) EdgeCleared(name string) bool {
	switch name {
	case tweet.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TweetMutation) ClearEdge(name string) error {
	switch name {
	case tweet.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Tweet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TweetMutation) ResetEdge(name string) error {
	switch name {
	case tweet.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Tweet edge %s", name)
}

// TwitterUserMutation represents an operation that mutates the TwitterUser nodes in the graph.
type TwitterUserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	username       *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	replies        map[int]struct{}
	removedreplies map[int]struct{}
	clearedreplies bool
	done           bool
	oldValue       func(context.Context) (*TwitterUser, error)
	predicates     []predicate.TwitterUser
}

var _ ent.Mutation = (*TwitterUserMutation)(nil)

// twitteruserOption allows management of the mutation configuration using functional options.
type twitteruserOption func(*TwitterUserMutation)

// newTwitterUserMutation creates new mutation for the TwitterUser entity.
func newTwitterUserMutation(c config, op Op, opts ...twitteruserOption) *TwitterUserMutation {
	m := &TwitterUserMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterUserID sets the ID field of the mutation.
func withTwitterUserID(id int) twitteruserOption {
	return func(m *TwitterUserMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterUser
		)
		m.oldValue = func(ctx context.Context) (*TwitterUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterUser sets the old TwitterUser of the mutation.
func withTwitterUser(node *TwitterUser) twitteruserOption {
	return func(m *TwitterUserMutation) {
		m.oldValue = func(context.Context) (*TwitterUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwitterUser entities.
func (m *TwitterUserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TwitterUserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TwitterUserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TwitterUser entity.
// If the TwitterUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterUserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TwitterUserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *TwitterUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *TwitterUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the TwitterUser entity.
// If the TwitterUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *TwitterUserMutation) ResetUsername() {
	m.username = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TwitterUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TwitterUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TwitterUser entity.
// If the TwitterUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TwitterUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by ids.
func (m *TwitterUserMutation) AddReplyIDs(ids ...int) {
	if m.replies == nil {
		m.replies = make(map[int]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Tweet entity.
func (m *TwitterUserMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared reports if the "replies" edge to the Tweet entity was cleared.
func (m *TwitterUserMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Tweet entity by IDs.
func (m *TwitterUserMutation) RemoveReplyIDs(ids ...int) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.replies, ids[i])
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Tweet entity.
func (m *TwitterUserMutation) RemovedRepliesIDs() (ids []int) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *TwitterUserMutation) RepliesIDs() (ids []int) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *TwitterUserMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// Where appends a list predicates to the TwitterUserMutation builder.
func (m *TwitterUserMutation) Where(ps ...predicate.TwitterUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterUser).
func (m *TwitterUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, twitteruser.FieldName)
	}
	if m.username != nil {
		fields = append(fields, twitteruser.FieldUsername)
	}
	if m.created_at != nil {
		fields = append(fields, twitteruser.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitteruser.FieldName:
		return m.Name()
	case twitteruser.FieldUsername:
		return m.Username()
	case twitteruser.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitteruser.FieldName:
		return m.OldName(ctx)
	case twitteruser.FieldUsername:
		return m.OldUsername(ctx)
	case twitteruser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitteruser.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case twitteruser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case twitteruser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TwitterUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwitterUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterUserMutation) ResetField(name string) error {
	switch name {
	case twitteruser.FieldName:
		m.ResetName()
		return nil
	case twitteruser.FieldUsername:
		m.ResetUsername()
		return nil
	case twitteruser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TwitterUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.replies != nil {
		edges = append(edges, twitteruser.EdgeReplies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case twitteruser.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedreplies != nil {
		edges = append(edges, twitteruser.EdgeReplies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case twitteruser.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedreplies {
		edges = append(edges, twitteruser.EdgeReplies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterUserMutation) EdgeCleared(name string) bool {
	switch name {
	case twitteruser.EdgeReplies:
		return m.clearedreplies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TwitterUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterUserMutation) ResetEdge(name string) error {
	switch name {
	case twitteruser.EdgeReplies:
		m.ResetReplies()
		return nil
	}
	return fmt.Errorf("unknown TwitterUser edge %s", name)
}

// UniversityMutation represents an operation that mutates the University nodes in the graph.
type UniversityMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	deviationLowerValue    *int
	adddeviationLowerValue *int
	deviationUpperValue    *int
	adddeviationUpperValue *int
	abbreviation           *string
	prefecture             *string
	created_at             *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*University, error)
	predicates             []predicate.University
}

var _ ent.Mutation = (*UniversityMutation)(nil)

// universityOption allows management of the mutation configuration using functional options.
type universityOption func(*UniversityMutation)

// newUniversityMutation creates new mutation for the University entity.
func newUniversityMutation(c config, op Op, opts ...universityOption) *UniversityMutation {
	m := &UniversityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniversity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniversityID sets the ID field of the mutation.
func withUniversityID(id int) universityOption {
	return func(m *UniversityMutation) {
		var (
			err   error
			once  sync.Once
			value *University
		)
		m.oldValue = func(ctx context.Context) (*University, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().University.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniversity sets the old University of the mutation.
func withUniversity(node *University) universityOption {
	return func(m *UniversityMutation) {
		m.oldValue = func(context.Context) (*University, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniversityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniversityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniversityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UniversityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().University.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UniversityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UniversityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UniversityMutation) ResetName() {
	m.name = nil
}

// SetDeviationLowerValue sets the "deviationLowerValue" field.
func (m *UniversityMutation) SetDeviationLowerValue(i int) {
	m.deviationLowerValue = &i
	m.adddeviationLowerValue = nil
}

// DeviationLowerValue returns the value of the "deviationLowerValue" field in the mutation.
func (m *UniversityMutation) DeviationLowerValue() (r int, exists bool) {
	v := m.deviationLowerValue
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviationLowerValue returns the old "deviationLowerValue" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldDeviationLowerValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviationLowerValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviationLowerValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviationLowerValue: %w", err)
	}
	return oldValue.DeviationLowerValue, nil
}

// AddDeviationLowerValue adds i to the "deviationLowerValue" field.
func (m *UniversityMutation) AddDeviationLowerValue(i int) {
	if m.adddeviationLowerValue != nil {
		*m.adddeviationLowerValue += i
	} else {
		m.adddeviationLowerValue = &i
	}
}

// AddedDeviationLowerValue returns the value that was added to the "deviationLowerValue" field in this mutation.
func (m *UniversityMutation) AddedDeviationLowerValue() (r int, exists bool) {
	v := m.adddeviationLowerValue
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeviationLowerValue resets all changes to the "deviationLowerValue" field.
func (m *UniversityMutation) ResetDeviationLowerValue() {
	m.deviationLowerValue = nil
	m.adddeviationLowerValue = nil
}

// SetDeviationUpperValue sets the "deviationUpperValue" field.
func (m *UniversityMutation) SetDeviationUpperValue(i int) {
	m.deviationUpperValue = &i
	m.adddeviationUpperValue = nil
}

// DeviationUpperValue returns the value of the "deviationUpperValue" field in the mutation.
func (m *UniversityMutation) DeviationUpperValue() (r int, exists bool) {
	v := m.deviationUpperValue
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviationUpperValue returns the old "deviationUpperValue" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldDeviationUpperValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviationUpperValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviationUpperValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviationUpperValue: %w", err)
	}
	return oldValue.DeviationUpperValue, nil
}

// AddDeviationUpperValue adds i to the "deviationUpperValue" field.
func (m *UniversityMutation) AddDeviationUpperValue(i int) {
	if m.adddeviationUpperValue != nil {
		*m.adddeviationUpperValue += i
	} else {
		m.adddeviationUpperValue = &i
	}
}

// AddedDeviationUpperValue returns the value that was added to the "deviationUpperValue" field in this mutation.
func (m *UniversityMutation) AddedDeviationUpperValue() (r int, exists bool) {
	v := m.adddeviationUpperValue
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeviationUpperValue resets all changes to the "deviationUpperValue" field.
func (m *UniversityMutation) ResetDeviationUpperValue() {
	m.deviationUpperValue = nil
	m.adddeviationUpperValue = nil
}

// SetAbbreviation sets the "abbreviation" field.
func (m *UniversityMutation) SetAbbreviation(s string) {
	m.abbreviation = &s
}

// Abbreviation returns the value of the "abbreviation" field in the mutation.
func (m *UniversityMutation) Abbreviation() (r string, exists bool) {
	v := m.abbreviation
	if v == nil {
		return
	}
	return *v, true
}

// OldAbbreviation returns the old "abbreviation" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldAbbreviation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbbreviation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbbreviation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbbreviation: %w", err)
	}
	return oldValue.Abbreviation, nil
}

// ResetAbbreviation resets all changes to the "abbreviation" field.
func (m *UniversityMutation) ResetAbbreviation() {
	m.abbreviation = nil
}

// SetPrefecture sets the "prefecture" field.
func (m *UniversityMutation) SetPrefecture(s string) {
	m.prefecture = &s
}

// Prefecture returns the value of the "prefecture" field in the mutation.
func (m *UniversityMutation) Prefecture() (r string, exists bool) {
	v := m.prefecture
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefecture returns the old "prefecture" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldPrefecture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefecture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefecture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefecture: %w", err)
	}
	return oldValue.Prefecture, nil
}

// ResetPrefecture resets all changes to the "prefecture" field.
func (m *UniversityMutation) ResetPrefecture() {
	m.prefecture = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UniversityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UniversityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UniversityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UniversityMutation builder.
func (m *UniversityMutation) Where(ps ...predicate.University) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UniversityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UniversityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.University, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UniversityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UniversityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (University).
func (m *UniversityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniversityMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, university.FieldName)
	}
	if m.deviationLowerValue != nil {
		fields = append(fields, university.FieldDeviationLowerValue)
	}
	if m.deviationUpperValue != nil {
		fields = append(fields, university.FieldDeviationUpperValue)
	}
	if m.abbreviation != nil {
		fields = append(fields, university.FieldAbbreviation)
	}
	if m.prefecture != nil {
		fields = append(fields, university.FieldPrefecture)
	}
	if m.created_at != nil {
		fields = append(fields, university.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniversityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case university.FieldName:
		return m.Name()
	case university.FieldDeviationLowerValue:
		return m.DeviationLowerValue()
	case university.FieldDeviationUpperValue:
		return m.DeviationUpperValue()
	case university.FieldAbbreviation:
		return m.Abbreviation()
	case university.FieldPrefecture:
		return m.Prefecture()
	case university.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniversityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case university.FieldName:
		return m.OldName(ctx)
	case university.FieldDeviationLowerValue:
		return m.OldDeviationLowerValue(ctx)
	case university.FieldDeviationUpperValue:
		return m.OldDeviationUpperValue(ctx)
	case university.FieldAbbreviation:
		return m.OldAbbreviation(ctx)
	case university.FieldPrefecture:
		return m.OldPrefecture(ctx)
	case university.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown University field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniversityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case university.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case university.FieldDeviationLowerValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviationLowerValue(v)
		return nil
	case university.FieldDeviationUpperValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviationUpperValue(v)
		return nil
	case university.FieldAbbreviation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbbreviation(v)
		return nil
	case university.FieldPrefecture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefecture(v)
		return nil
	case university.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown University field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniversityMutation) AddedFields() []string {
	var fields []string
	if m.adddeviationLowerValue != nil {
		fields = append(fields, university.FieldDeviationLowerValue)
	}
	if m.adddeviationUpperValue != nil {
		fields = append(fields, university.FieldDeviationUpperValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniversityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case university.FieldDeviationLowerValue:
		return m.AddedDeviationLowerValue()
	case university.FieldDeviationUpperValue:
		return m.AddedDeviationUpperValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniversityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case university.FieldDeviationLowerValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviationLowerValue(v)
		return nil
	case university.FieldDeviationUpperValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviationUpperValue(v)
		return nil
	}
	return fmt.Errorf("unknown University numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniversityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniversityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniversityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown University nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniversityMutation) ResetField(name string) error {
	switch name {
	case university.FieldName:
		m.ResetName()
		return nil
	case university.FieldDeviationLowerValue:
		m.ResetDeviationLowerValue()
		return nil
	case university.FieldDeviationUpperValue:
		m.ResetDeviationUpperValue()
		return nil
	case university.FieldAbbreviation:
		m.ResetAbbreviation()
		return nil
	case university.FieldPrefecture:
		m.ResetPrefecture()
		return nil
	case university.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown University field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniversityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniversityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniversityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniversityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniversityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniversityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniversityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown University unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniversityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown University edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	weight                *float64
	addweight             *float64
	height                *float64
	addheight             *float64
	clerk_id              *string
	is_male               *bool
	created_at            *time.Time
	clearedFields         map[string]struct{}
	mbti                  *int
	clearedmbti           bool
	special_events        map[int]struct{}
	removedspecial_events map[int]struct{}
	clearedspecial_events bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *UserMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetHeight sets the "height" field.
func (m *UserMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *UserMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *UserMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *UserMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *UserMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetClerkID sets the "clerk_id" field.
func (m *UserMutation) SetClerkID(s string) {
	m.clerk_id = &s
}

// ClerkID returns the value of the "clerk_id" field in the mutation.
func (m *UserMutation) ClerkID() (r string, exists bool) {
	v := m.clerk_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClerkID returns the old "clerk_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClerkID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClerkID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClerkID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClerkID: %w", err)
	}
	return oldValue.ClerkID, nil
}

// ResetClerkID resets all changes to the "clerk_id" field.
func (m *UserMutation) ResetClerkID() {
	m.clerk_id = nil
}

// SetIsMale sets the "is_male" field.
func (m *UserMutation) SetIsMale(b bool) {
	m.is_male = &b
}

// IsMale returns the value of the "is_male" field in the mutation.
func (m *UserMutation) IsMale() (r bool, exists bool) {
	v := m.is_male
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMale returns the old "is_male" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsMale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMale: %w", err)
	}
	return oldValue.IsMale, nil
}

// ResetIsMale resets all changes to the "is_male" field.
func (m *UserMutation) ResetIsMale() {
	m.is_male = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMbtiID sets the "mbti" edge to the Mbti entity by id.
func (m *UserMutation) SetMbtiID(id int) {
	m.mbti = &id
}

// ClearMbti clears the "mbti" edge to the Mbti entity.
func (m *UserMutation) ClearMbti() {
	m.clearedmbti = true
}

// MbtiCleared reports if the "mbti" edge to the Mbti entity was cleared.
func (m *UserMutation) MbtiCleared() bool {
	return m.clearedmbti
}

// MbtiID returns the "mbti" edge ID in the mutation.
func (m *UserMutation) MbtiID() (id int, exists bool) {
	if m.mbti != nil {
		return *m.mbti, true
	}
	return
}

// MbtiIDs returns the "mbti" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MbtiID instead. It exists only for internal usage by the builders.
func (m *UserMutation) MbtiIDs() (ids []int) {
	if id := m.mbti; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMbti resets all changes to the "mbti" edge.
func (m *UserMutation) ResetMbti() {
	m.mbti = nil
	m.clearedmbti = false
}

// AddSpecialEventIDs adds the "special_events" edge to the SpecialEvent entity by ids.
func (m *UserMutation) AddSpecialEventIDs(ids ...int) {
	if m.special_events == nil {
		m.special_events = make(map[int]struct{})
	}
	for i := range ids {
		m.special_events[ids[i]] = struct{}{}
	}
}

// ClearSpecialEvents clears the "special_events" edge to the SpecialEvent entity.
func (m *UserMutation) ClearSpecialEvents() {
	m.clearedspecial_events = true
}

// SpecialEventsCleared reports if the "special_events" edge to the SpecialEvent entity was cleared.
func (m *UserMutation) SpecialEventsCleared() bool {
	return m.clearedspecial_events
}

// RemoveSpecialEventIDs removes the "special_events" edge to the SpecialEvent entity by IDs.
func (m *UserMutation) RemoveSpecialEventIDs(ids ...int) {
	if m.removedspecial_events == nil {
		m.removedspecial_events = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.special_events, ids[i])
		m.removedspecial_events[ids[i]] = struct{}{}
	}
}

// RemovedSpecialEvents returns the removed IDs of the "special_events" edge to the SpecialEvent entity.
func (m *UserMutation) RemovedSpecialEventsIDs() (ids []int) {
	for id := range m.removedspecial_events {
		ids = append(ids, id)
	}
	return
}

// SpecialEventsIDs returns the "special_events" edge IDs in the mutation.
func (m *UserMutation) SpecialEventsIDs() (ids []int) {
	for id := range m.special_events {
		ids = append(ids, id)
	}
	return
}

// ResetSpecialEvents resets all changes to the "special_events" edge.
func (m *UserMutation) ResetSpecialEvents() {
	m.special_events = nil
	m.clearedspecial_events = false
	m.removedspecial_events = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.clerk_id != nil {
		fields = append(fields, user.FieldClerkID)
	}
	if m.is_male != nil {
		fields = append(fields, user.FieldIsMale)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldHeight:
		return m.Height()
	case user.FieldClerkID:
		return m.ClerkID()
	case user.FieldIsMale:
		return m.IsMale()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldHeight:
		return m.OldHeight(ctx)
	case user.FieldClerkID:
		return m.OldClerkID(ctx)
	case user.FieldIsMale:
		return m.OldIsMale(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case user.FieldClerkID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClerkID(v)
		return nil
	case user.FieldIsMale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMale(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, user.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldWeight:
		return m.AddedWeight()
	case user.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldHeight:
		m.ResetHeight()
		return nil
	case user.FieldClerkID:
		m.ResetClerkID()
		return nil
	case user.FieldIsMale:
		m.ResetIsMale()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mbti != nil {
		edges = append(edges, user.EdgeMbti)
	}
	if m.special_events != nil {
		edges = append(edges, user.EdgeSpecialEvents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMbti:
		if id := m.mbti; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSpecialEvents:
		ids := make([]ent.Value, 0, len(m.special_events))
		for id := range m.special_events {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedspecial_events != nil {
		edges = append(edges, user.EdgeSpecialEvents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSpecialEvents:
		ids := make([]ent.Value, 0, len(m.removedspecial_events))
		for id := range m.removedspecial_events {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmbti {
		edges = append(edges, user.EdgeMbti)
	}
	if m.clearedspecial_events {
		edges = append(edges, user.EdgeSpecialEvents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeMbti:
		return m.clearedmbti
	case user.EdgeSpecialEvents:
		return m.clearedspecial_events
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeMbti:
		m.ClearMbti()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMbti:
		m.ResetMbti()
		return nil
	case user.EdgeSpecialEvents:
		m.ResetSpecialEvents()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
