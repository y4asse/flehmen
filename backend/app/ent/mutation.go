// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/nextaction"
	"flehmen-api/ent/predicate"
	"flehmen-api/ent/sukipi"
	"flehmen-api/ent/university"
	"flehmen-api/ent/user"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNextAction = "NextAction"
	TypeSukipi     = "Sukipi"
	TypeUniversity = "University"
	TypeUser       = "User"
)

// NextActionMutation represents an operation that mutates the NextAction nodes in the graph.
type NextActionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	score_min     *int
	addscore_min  *int
	score_max     *int
	addscore_max  *int
	action        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NextAction, error)
	predicates    []predicate.NextAction
}

var _ ent.Mutation = (*NextActionMutation)(nil)

// nextactionOption allows management of the mutation configuration using functional options.
type nextactionOption func(*NextActionMutation)

// newNextActionMutation creates new mutation for the NextAction entity.
func newNextActionMutation(c config, op Op, opts ...nextactionOption) *NextActionMutation {
	m := &NextActionMutation{
		config:        c,
		op:            op,
		typ:           TypeNextAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNextActionID sets the ID field of the mutation.
func withNextActionID(id int) nextactionOption {
	return func(m *NextActionMutation) {
		var (
			err   error
			once  sync.Once
			value *NextAction
		)
		m.oldValue = func(ctx context.Context) (*NextAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NextAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNextAction sets the old NextAction of the mutation.
func withNextAction(node *NextAction) nextactionOption {
	return func(m *NextActionMutation) {
		m.oldValue = func(context.Context) (*NextAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NextActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NextActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NextActionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NextActionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NextAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetScoreMin sets the "score_min" field.
func (m *NextActionMutation) SetScoreMin(i int) {
	m.score_min = &i
	m.addscore_min = nil
}

// ScoreMin returns the value of the "score_min" field in the mutation.
func (m *NextActionMutation) ScoreMin() (r int, exists bool) {
	v := m.score_min
	if v == nil {
		return
	}
	return *v, true
}

// OldScoreMin returns the old "score_min" field's value of the NextAction entity.
// If the NextAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NextActionMutation) OldScoreMin(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScoreMin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScoreMin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScoreMin: %w", err)
	}
	return oldValue.ScoreMin, nil
}

// AddScoreMin adds i to the "score_min" field.
func (m *NextActionMutation) AddScoreMin(i int) {
	if m.addscore_min != nil {
		*m.addscore_min += i
	} else {
		m.addscore_min = &i
	}
}

// AddedScoreMin returns the value that was added to the "score_min" field in this mutation.
func (m *NextActionMutation) AddedScoreMin() (r int, exists bool) {
	v := m.addscore_min
	if v == nil {
		return
	}
	return *v, true
}

// ResetScoreMin resets all changes to the "score_min" field.
func (m *NextActionMutation) ResetScoreMin() {
	m.score_min = nil
	m.addscore_min = nil
}

// SetScoreMax sets the "score_max" field.
func (m *NextActionMutation) SetScoreMax(i int) {
	m.score_max = &i
	m.addscore_max = nil
}

// ScoreMax returns the value of the "score_max" field in the mutation.
func (m *NextActionMutation) ScoreMax() (r int, exists bool) {
	v := m.score_max
	if v == nil {
		return
	}
	return *v, true
}

// OldScoreMax returns the old "score_max" field's value of the NextAction entity.
// If the NextAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NextActionMutation) OldScoreMax(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScoreMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScoreMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScoreMax: %w", err)
	}
	return oldValue.ScoreMax, nil
}

// AddScoreMax adds i to the "score_max" field.
func (m *NextActionMutation) AddScoreMax(i int) {
	if m.addscore_max != nil {
		*m.addscore_max += i
	} else {
		m.addscore_max = &i
	}
}

// AddedScoreMax returns the value that was added to the "score_max" field in this mutation.
func (m *NextActionMutation) AddedScoreMax() (r int, exists bool) {
	v := m.addscore_max
	if v == nil {
		return
	}
	return *v, true
}

// ResetScoreMax resets all changes to the "score_max" field.
func (m *NextActionMutation) ResetScoreMax() {
	m.score_max = nil
	m.addscore_max = nil
}

// SetAction sets the "action" field.
func (m *NextActionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *NextActionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the NextAction entity.
// If the NextAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NextActionMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *NextActionMutation) ResetAction() {
	m.action = nil
}

// Where appends a list predicates to the NextActionMutation builder.
func (m *NextActionMutation) Where(ps ...predicate.NextAction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NextActionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NextActionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NextAction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NextActionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NextActionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NextAction).
func (m *NextActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NextActionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.score_min != nil {
		fields = append(fields, nextaction.FieldScoreMin)
	}
	if m.score_max != nil {
		fields = append(fields, nextaction.FieldScoreMax)
	}
	if m.action != nil {
		fields = append(fields, nextaction.FieldAction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NextActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nextaction.FieldScoreMin:
		return m.ScoreMin()
	case nextaction.FieldScoreMax:
		return m.ScoreMax()
	case nextaction.FieldAction:
		return m.Action()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NextActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nextaction.FieldScoreMin:
		return m.OldScoreMin(ctx)
	case nextaction.FieldScoreMax:
		return m.OldScoreMax(ctx)
	case nextaction.FieldAction:
		return m.OldAction(ctx)
	}
	return nil, fmt.Errorf("unknown NextAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NextActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nextaction.FieldScoreMin:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScoreMin(v)
		return nil
	case nextaction.FieldScoreMax:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScoreMax(v)
		return nil
	case nextaction.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	}
	return fmt.Errorf("unknown NextAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NextActionMutation) AddedFields() []string {
	var fields []string
	if m.addscore_min != nil {
		fields = append(fields, nextaction.FieldScoreMin)
	}
	if m.addscore_max != nil {
		fields = append(fields, nextaction.FieldScoreMax)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NextActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nextaction.FieldScoreMin:
		return m.AddedScoreMin()
	case nextaction.FieldScoreMax:
		return m.AddedScoreMax()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NextActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nextaction.FieldScoreMin:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScoreMin(v)
		return nil
	case nextaction.FieldScoreMax:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScoreMax(v)
		return nil
	}
	return fmt.Errorf("unknown NextAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NextActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NextActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NextActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NextAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NextActionMutation) ResetField(name string) error {
	switch name {
	case nextaction.FieldScoreMin:
		m.ResetScoreMin()
		return nil
	case nextaction.FieldScoreMax:
		m.ResetScoreMax()
		return nil
	case nextaction.FieldAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown NextAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NextActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NextActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NextActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NextActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NextActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NextActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NextActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NextAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NextActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NextAction edge %s", name)
}

// SukipiMutation represents an operation that mutates the Sukipi nodes in the graph.
type SukipiMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	liked_at       *time.Time
	weight         *float64
	addweight      *float64
	height         *float64
	addheight      *float64
	x_id           *string
	hobby          *string
	birthday       *time.Time
	shoesSize      *float64
	addshoesSize   *float64
	family         *string
	nearly_station *string
	mbti           *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Sukipi, error)
	predicates     []predicate.Sukipi
}

var _ ent.Mutation = (*SukipiMutation)(nil)

// sukipiOption allows management of the mutation configuration using functional options.
type sukipiOption func(*SukipiMutation)

// newSukipiMutation creates new mutation for the Sukipi entity.
func newSukipiMutation(c config, op Op, opts ...sukipiOption) *SukipiMutation {
	m := &SukipiMutation{
		config:        c,
		op:            op,
		typ:           TypeSukipi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSukipiID sets the ID field of the mutation.
func withSukipiID(id int) sukipiOption {
	return func(m *SukipiMutation) {
		var (
			err   error
			once  sync.Once
			value *Sukipi
		)
		m.oldValue = func(ctx context.Context) (*Sukipi, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sukipi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSukipi sets the old Sukipi of the mutation.
func withSukipi(node *Sukipi) sukipiOption {
	return func(m *SukipiMutation) {
		m.oldValue = func(context.Context) (*Sukipi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SukipiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SukipiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SukipiMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SukipiMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sukipi.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SukipiMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SukipiMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SukipiMutation) ResetName() {
	m.name = nil
}

// SetLikedAt sets the "liked_at" field.
func (m *SukipiMutation) SetLikedAt(t time.Time) {
	m.liked_at = &t
}

// LikedAt returns the value of the "liked_at" field in the mutation.
func (m *SukipiMutation) LikedAt() (r time.Time, exists bool) {
	v := m.liked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLikedAt returns the old "liked_at" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldLikedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikedAt: %w", err)
	}
	return oldValue.LikedAt, nil
}

// ResetLikedAt resets all changes to the "liked_at" field.
func (m *SukipiMutation) ResetLikedAt() {
	m.liked_at = nil
}

// SetWeight sets the "weight" field.
func (m *SukipiMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *SukipiMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *SukipiMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *SukipiMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *SukipiMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[sukipi.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *SukipiMutation) WeightCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *SukipiMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, sukipi.FieldWeight)
}

// SetHeight sets the "height" field.
func (m *SukipiMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *SukipiMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldHeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *SukipiMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *SukipiMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeight clears the value of the "height" field.
func (m *SukipiMutation) ClearHeight() {
	m.height = nil
	m.addheight = nil
	m.clearedFields[sukipi.FieldHeight] = struct{}{}
}

// HeightCleared returns if the "height" field was cleared in this mutation.
func (m *SukipiMutation) HeightCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldHeight]
	return ok
}

// ResetHeight resets all changes to the "height" field.
func (m *SukipiMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
	delete(m.clearedFields, sukipi.FieldHeight)
}

// SetXID sets the "x_id" field.
func (m *SukipiMutation) SetXID(s string) {
	m.x_id = &s
}

// XID returns the value of the "x_id" field in the mutation.
func (m *SukipiMutation) XID() (r string, exists bool) {
	v := m.x_id
	if v == nil {
		return
	}
	return *v, true
}

// OldXID returns the old "x_id" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldXID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXID: %w", err)
	}
	return oldValue.XID, nil
}

// ClearXID clears the value of the "x_id" field.
func (m *SukipiMutation) ClearXID() {
	m.x_id = nil
	m.clearedFields[sukipi.FieldXID] = struct{}{}
}

// XIDCleared returns if the "x_id" field was cleared in this mutation.
func (m *SukipiMutation) XIDCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldXID]
	return ok
}

// ResetXID resets all changes to the "x_id" field.
func (m *SukipiMutation) ResetXID() {
	m.x_id = nil
	delete(m.clearedFields, sukipi.FieldXID)
}

// SetHobby sets the "hobby" field.
func (m *SukipiMutation) SetHobby(s string) {
	m.hobby = &s
}

// Hobby returns the value of the "hobby" field in the mutation.
func (m *SukipiMutation) Hobby() (r string, exists bool) {
	v := m.hobby
	if v == nil {
		return
	}
	return *v, true
}

// OldHobby returns the old "hobby" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldHobby(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHobby is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHobby requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHobby: %w", err)
	}
	return oldValue.Hobby, nil
}

// ClearHobby clears the value of the "hobby" field.
func (m *SukipiMutation) ClearHobby() {
	m.hobby = nil
	m.clearedFields[sukipi.FieldHobby] = struct{}{}
}

// HobbyCleared returns if the "hobby" field was cleared in this mutation.
func (m *SukipiMutation) HobbyCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldHobby]
	return ok
}

// ResetHobby resets all changes to the "hobby" field.
func (m *SukipiMutation) ResetHobby() {
	m.hobby = nil
	delete(m.clearedFields, sukipi.FieldHobby)
}

// SetBirthday sets the "birthday" field.
func (m *SukipiMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *SukipiMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldBirthday(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *SukipiMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[sukipi.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *SukipiMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *SukipiMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, sukipi.FieldBirthday)
}

// SetShoesSize sets the "shoesSize" field.
func (m *SukipiMutation) SetShoesSize(f float64) {
	m.shoesSize = &f
	m.addshoesSize = nil
}

// ShoesSize returns the value of the "shoesSize" field in the mutation.
func (m *SukipiMutation) ShoesSize() (r float64, exists bool) {
	v := m.shoesSize
	if v == nil {
		return
	}
	return *v, true
}

// OldShoesSize returns the old "shoesSize" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldShoesSize(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShoesSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShoesSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoesSize: %w", err)
	}
	return oldValue.ShoesSize, nil
}

// AddShoesSize adds f to the "shoesSize" field.
func (m *SukipiMutation) AddShoesSize(f float64) {
	if m.addshoesSize != nil {
		*m.addshoesSize += f
	} else {
		m.addshoesSize = &f
	}
}

// AddedShoesSize returns the value that was added to the "shoesSize" field in this mutation.
func (m *SukipiMutation) AddedShoesSize() (r float64, exists bool) {
	v := m.addshoesSize
	if v == nil {
		return
	}
	return *v, true
}

// ClearShoesSize clears the value of the "shoesSize" field.
func (m *SukipiMutation) ClearShoesSize() {
	m.shoesSize = nil
	m.addshoesSize = nil
	m.clearedFields[sukipi.FieldShoesSize] = struct{}{}
}

// ShoesSizeCleared returns if the "shoesSize" field was cleared in this mutation.
func (m *SukipiMutation) ShoesSizeCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldShoesSize]
	return ok
}

// ResetShoesSize resets all changes to the "shoesSize" field.
func (m *SukipiMutation) ResetShoesSize() {
	m.shoesSize = nil
	m.addshoesSize = nil
	delete(m.clearedFields, sukipi.FieldShoesSize)
}

// SetFamily sets the "family" field.
func (m *SukipiMutation) SetFamily(s string) {
	m.family = &s
}

// Family returns the value of the "family" field in the mutation.
func (m *SukipiMutation) Family() (r string, exists bool) {
	v := m.family
	if v == nil {
		return
	}
	return *v, true
}

// OldFamily returns the old "family" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldFamily(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamily is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamily requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamily: %w", err)
	}
	return oldValue.Family, nil
}

// ClearFamily clears the value of the "family" field.
func (m *SukipiMutation) ClearFamily() {
	m.family = nil
	m.clearedFields[sukipi.FieldFamily] = struct{}{}
}

// FamilyCleared returns if the "family" field was cleared in this mutation.
func (m *SukipiMutation) FamilyCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldFamily]
	return ok
}

// ResetFamily resets all changes to the "family" field.
func (m *SukipiMutation) ResetFamily() {
	m.family = nil
	delete(m.clearedFields, sukipi.FieldFamily)
}

// SetNearlyStation sets the "nearly_station" field.
func (m *SukipiMutation) SetNearlyStation(s string) {
	m.nearly_station = &s
}

// NearlyStation returns the value of the "nearly_station" field in the mutation.
func (m *SukipiMutation) NearlyStation() (r string, exists bool) {
	v := m.nearly_station
	if v == nil {
		return
	}
	return *v, true
}

// OldNearlyStation returns the old "nearly_station" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldNearlyStation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNearlyStation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNearlyStation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNearlyStation: %w", err)
	}
	return oldValue.NearlyStation, nil
}

// ClearNearlyStation clears the value of the "nearly_station" field.
func (m *SukipiMutation) ClearNearlyStation() {
	m.nearly_station = nil
	m.clearedFields[sukipi.FieldNearlyStation] = struct{}{}
}

// NearlyStationCleared returns if the "nearly_station" field was cleared in this mutation.
func (m *SukipiMutation) NearlyStationCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldNearlyStation]
	return ok
}

// ResetNearlyStation resets all changes to the "nearly_station" field.
func (m *SukipiMutation) ResetNearlyStation() {
	m.nearly_station = nil
	delete(m.clearedFields, sukipi.FieldNearlyStation)
}

// SetMbti sets the "mbti" field.
func (m *SukipiMutation) SetMbti(s string) {
	m.mbti = &s
}

// Mbti returns the value of the "mbti" field in the mutation.
func (m *SukipiMutation) Mbti() (r string, exists bool) {
	v := m.mbti
	if v == nil {
		return
	}
	return *v, true
}

// OldMbti returns the old "mbti" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldMbti(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMbti is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMbti requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMbti: %w", err)
	}
	return oldValue.Mbti, nil
}

// ClearMbti clears the value of the "mbti" field.
func (m *SukipiMutation) ClearMbti() {
	m.mbti = nil
	m.clearedFields[sukipi.FieldMbti] = struct{}{}
}

// MbtiCleared returns if the "mbti" field was cleared in this mutation.
func (m *SukipiMutation) MbtiCleared() bool {
	_, ok := m.clearedFields[sukipi.FieldMbti]
	return ok
}

// ResetMbti resets all changes to the "mbti" field.
func (m *SukipiMutation) ResetMbti() {
	m.mbti = nil
	delete(m.clearedFields, sukipi.FieldMbti)
}

// SetCreatedAt sets the "created_at" field.
func (m *SukipiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SukipiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Sukipi entity.
// If the Sukipi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SukipiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SukipiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SukipiMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SukipiMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SukipiMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SukipiMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SukipiMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SukipiMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SukipiMutation builder.
func (m *SukipiMutation) Where(ps ...predicate.Sukipi) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SukipiMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SukipiMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sukipi, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SukipiMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SukipiMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sukipi).
func (m *SukipiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SukipiMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.name != nil {
		fields = append(fields, sukipi.FieldName)
	}
	if m.liked_at != nil {
		fields = append(fields, sukipi.FieldLikedAt)
	}
	if m.weight != nil {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, sukipi.FieldHeight)
	}
	if m.x_id != nil {
		fields = append(fields, sukipi.FieldXID)
	}
	if m.hobby != nil {
		fields = append(fields, sukipi.FieldHobby)
	}
	if m.birthday != nil {
		fields = append(fields, sukipi.FieldBirthday)
	}
	if m.shoesSize != nil {
		fields = append(fields, sukipi.FieldShoesSize)
	}
	if m.family != nil {
		fields = append(fields, sukipi.FieldFamily)
	}
	if m.nearly_station != nil {
		fields = append(fields, sukipi.FieldNearlyStation)
	}
	if m.mbti != nil {
		fields = append(fields, sukipi.FieldMbti)
	}
	if m.created_at != nil {
		fields = append(fields, sukipi.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SukipiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sukipi.FieldName:
		return m.Name()
	case sukipi.FieldLikedAt:
		return m.LikedAt()
	case sukipi.FieldWeight:
		return m.Weight()
	case sukipi.FieldHeight:
		return m.Height()
	case sukipi.FieldXID:
		return m.XID()
	case sukipi.FieldHobby:
		return m.Hobby()
	case sukipi.FieldBirthday:
		return m.Birthday()
	case sukipi.FieldShoesSize:
		return m.ShoesSize()
	case sukipi.FieldFamily:
		return m.Family()
	case sukipi.FieldNearlyStation:
		return m.NearlyStation()
	case sukipi.FieldMbti:
		return m.Mbti()
	case sukipi.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SukipiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sukipi.FieldName:
		return m.OldName(ctx)
	case sukipi.FieldLikedAt:
		return m.OldLikedAt(ctx)
	case sukipi.FieldWeight:
		return m.OldWeight(ctx)
	case sukipi.FieldHeight:
		return m.OldHeight(ctx)
	case sukipi.FieldXID:
		return m.OldXID(ctx)
	case sukipi.FieldHobby:
		return m.OldHobby(ctx)
	case sukipi.FieldBirthday:
		return m.OldBirthday(ctx)
	case sukipi.FieldShoesSize:
		return m.OldShoesSize(ctx)
	case sukipi.FieldFamily:
		return m.OldFamily(ctx)
	case sukipi.FieldNearlyStation:
		return m.OldNearlyStation(ctx)
	case sukipi.FieldMbti:
		return m.OldMbti(ctx)
	case sukipi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Sukipi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SukipiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sukipi.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sukipi.FieldLikedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikedAt(v)
		return nil
	case sukipi.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case sukipi.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case sukipi.FieldXID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXID(v)
		return nil
	case sukipi.FieldHobby:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHobby(v)
		return nil
	case sukipi.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case sukipi.FieldShoesSize:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoesSize(v)
		return nil
	case sukipi.FieldFamily:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamily(v)
		return nil
	case sukipi.FieldNearlyStation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNearlyStation(v)
		return nil
	case sukipi.FieldMbti:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMbti(v)
		return nil
	case sukipi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Sukipi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SukipiMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, sukipi.FieldHeight)
	}
	if m.addshoesSize != nil {
		fields = append(fields, sukipi.FieldShoesSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SukipiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sukipi.FieldWeight:
		return m.AddedWeight()
	case sukipi.FieldHeight:
		return m.AddedHeight()
	case sukipi.FieldShoesSize:
		return m.AddedShoesSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SukipiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sukipi.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case sukipi.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case sukipi.FieldShoesSize:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShoesSize(v)
		return nil
	}
	return fmt.Errorf("unknown Sukipi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SukipiMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sukipi.FieldWeight) {
		fields = append(fields, sukipi.FieldWeight)
	}
	if m.FieldCleared(sukipi.FieldHeight) {
		fields = append(fields, sukipi.FieldHeight)
	}
	if m.FieldCleared(sukipi.FieldXID) {
		fields = append(fields, sukipi.FieldXID)
	}
	if m.FieldCleared(sukipi.FieldHobby) {
		fields = append(fields, sukipi.FieldHobby)
	}
	if m.FieldCleared(sukipi.FieldBirthday) {
		fields = append(fields, sukipi.FieldBirthday)
	}
	if m.FieldCleared(sukipi.FieldShoesSize) {
		fields = append(fields, sukipi.FieldShoesSize)
	}
	if m.FieldCleared(sukipi.FieldFamily) {
		fields = append(fields, sukipi.FieldFamily)
	}
	if m.FieldCleared(sukipi.FieldNearlyStation) {
		fields = append(fields, sukipi.FieldNearlyStation)
	}
	if m.FieldCleared(sukipi.FieldMbti) {
		fields = append(fields, sukipi.FieldMbti)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SukipiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SukipiMutation) ClearField(name string) error {
	switch name {
	case sukipi.FieldWeight:
		m.ClearWeight()
		return nil
	case sukipi.FieldHeight:
		m.ClearHeight()
		return nil
	case sukipi.FieldXID:
		m.ClearXID()
		return nil
	case sukipi.FieldHobby:
		m.ClearHobby()
		return nil
	case sukipi.FieldBirthday:
		m.ClearBirthday()
		return nil
	case sukipi.FieldShoesSize:
		m.ClearShoesSize()
		return nil
	case sukipi.FieldFamily:
		m.ClearFamily()
		return nil
	case sukipi.FieldNearlyStation:
		m.ClearNearlyStation()
		return nil
	case sukipi.FieldMbti:
		m.ClearMbti()
		return nil
	}
	return fmt.Errorf("unknown Sukipi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SukipiMutation) ResetField(name string) error {
	switch name {
	case sukipi.FieldName:
		m.ResetName()
		return nil
	case sukipi.FieldLikedAt:
		m.ResetLikedAt()
		return nil
	case sukipi.FieldWeight:
		m.ResetWeight()
		return nil
	case sukipi.FieldHeight:
		m.ResetHeight()
		return nil
	case sukipi.FieldXID:
		m.ResetXID()
		return nil
	case sukipi.FieldHobby:
		m.ResetHobby()
		return nil
	case sukipi.FieldBirthday:
		m.ResetBirthday()
		return nil
	case sukipi.FieldShoesSize:
		m.ResetShoesSize()
		return nil
	case sukipi.FieldFamily:
		m.ResetFamily()
		return nil
	case sukipi.FieldNearlyStation:
		m.ResetNearlyStation()
		return nil
	case sukipi.FieldMbti:
		m.ResetMbti()
		return nil
	case sukipi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Sukipi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SukipiMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, sukipi.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SukipiMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sukipi.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SukipiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SukipiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SukipiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, sukipi.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SukipiMutation) EdgeCleared(name string) bool {
	switch name {
	case sukipi.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SukipiMutation) ClearEdge(name string) error {
	switch name {
	case sukipi.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Sukipi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SukipiMutation) ResetEdge(name string) error {
	switch name {
	case sukipi.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Sukipi edge %s", name)
}

// UniversityMutation represents an operation that mutates the University nodes in the graph.
type UniversityMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	deviationLowerValue    *int
	adddeviationLowerValue *int
	deviationUpperValue    *int
	adddeviationUpperValue *int
	abbreviation           *string
	prefecture             *string
	created_at             *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*University, error)
	predicates             []predicate.University
}

var _ ent.Mutation = (*UniversityMutation)(nil)

// universityOption allows management of the mutation configuration using functional options.
type universityOption func(*UniversityMutation)

// newUniversityMutation creates new mutation for the University entity.
func newUniversityMutation(c config, op Op, opts ...universityOption) *UniversityMutation {
	m := &UniversityMutation{
		config:        c,
		op:            op,
		typ:           TypeUniversity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUniversityID sets the ID field of the mutation.
func withUniversityID(id int) universityOption {
	return func(m *UniversityMutation) {
		var (
			err   error
			once  sync.Once
			value *University
		)
		m.oldValue = func(ctx context.Context) (*University, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().University.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUniversity sets the old University of the mutation.
func withUniversity(node *University) universityOption {
	return func(m *UniversityMutation) {
		m.oldValue = func(context.Context) (*University, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UniversityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UniversityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UniversityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UniversityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().University.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UniversityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UniversityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UniversityMutation) ResetName() {
	m.name = nil
}

// SetDeviationLowerValue sets the "deviationLowerValue" field.
func (m *UniversityMutation) SetDeviationLowerValue(i int) {
	m.deviationLowerValue = &i
	m.adddeviationLowerValue = nil
}

// DeviationLowerValue returns the value of the "deviationLowerValue" field in the mutation.
func (m *UniversityMutation) DeviationLowerValue() (r int, exists bool) {
	v := m.deviationLowerValue
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviationLowerValue returns the old "deviationLowerValue" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldDeviationLowerValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviationLowerValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviationLowerValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviationLowerValue: %w", err)
	}
	return oldValue.DeviationLowerValue, nil
}

// AddDeviationLowerValue adds i to the "deviationLowerValue" field.
func (m *UniversityMutation) AddDeviationLowerValue(i int) {
	if m.adddeviationLowerValue != nil {
		*m.adddeviationLowerValue += i
	} else {
		m.adddeviationLowerValue = &i
	}
}

// AddedDeviationLowerValue returns the value that was added to the "deviationLowerValue" field in this mutation.
func (m *UniversityMutation) AddedDeviationLowerValue() (r int, exists bool) {
	v := m.adddeviationLowerValue
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeviationLowerValue resets all changes to the "deviationLowerValue" field.
func (m *UniversityMutation) ResetDeviationLowerValue() {
	m.deviationLowerValue = nil
	m.adddeviationLowerValue = nil
}

// SetDeviationUpperValue sets the "deviationUpperValue" field.
func (m *UniversityMutation) SetDeviationUpperValue(i int) {
	m.deviationUpperValue = &i
	m.adddeviationUpperValue = nil
}

// DeviationUpperValue returns the value of the "deviationUpperValue" field in the mutation.
func (m *UniversityMutation) DeviationUpperValue() (r int, exists bool) {
	v := m.deviationUpperValue
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviationUpperValue returns the old "deviationUpperValue" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldDeviationUpperValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviationUpperValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviationUpperValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviationUpperValue: %w", err)
	}
	return oldValue.DeviationUpperValue, nil
}

// AddDeviationUpperValue adds i to the "deviationUpperValue" field.
func (m *UniversityMutation) AddDeviationUpperValue(i int) {
	if m.adddeviationUpperValue != nil {
		*m.adddeviationUpperValue += i
	} else {
		m.adddeviationUpperValue = &i
	}
}

// AddedDeviationUpperValue returns the value that was added to the "deviationUpperValue" field in this mutation.
func (m *UniversityMutation) AddedDeviationUpperValue() (r int, exists bool) {
	v := m.adddeviationUpperValue
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeviationUpperValue resets all changes to the "deviationUpperValue" field.
func (m *UniversityMutation) ResetDeviationUpperValue() {
	m.deviationUpperValue = nil
	m.adddeviationUpperValue = nil
}

// SetAbbreviation sets the "abbreviation" field.
func (m *UniversityMutation) SetAbbreviation(s string) {
	m.abbreviation = &s
}

// Abbreviation returns the value of the "abbreviation" field in the mutation.
func (m *UniversityMutation) Abbreviation() (r string, exists bool) {
	v := m.abbreviation
	if v == nil {
		return
	}
	return *v, true
}

// OldAbbreviation returns the old "abbreviation" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldAbbreviation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbbreviation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbbreviation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbbreviation: %w", err)
	}
	return oldValue.Abbreviation, nil
}

// ResetAbbreviation resets all changes to the "abbreviation" field.
func (m *UniversityMutation) ResetAbbreviation() {
	m.abbreviation = nil
}

// SetPrefecture sets the "prefecture" field.
func (m *UniversityMutation) SetPrefecture(s string) {
	m.prefecture = &s
}

// Prefecture returns the value of the "prefecture" field in the mutation.
func (m *UniversityMutation) Prefecture() (r string, exists bool) {
	v := m.prefecture
	if v == nil {
		return
	}
	return *v, true
}

// OldPrefecture returns the old "prefecture" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldPrefecture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrefecture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrefecture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrefecture: %w", err)
	}
	return oldValue.Prefecture, nil
}

// ResetPrefecture resets all changes to the "prefecture" field.
func (m *UniversityMutation) ResetPrefecture() {
	m.prefecture = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UniversityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UniversityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the University entity.
// If the University object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UniversityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UniversityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UniversityMutation builder.
func (m *UniversityMutation) Where(ps ...predicate.University) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UniversityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UniversityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.University, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UniversityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UniversityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (University).
func (m *UniversityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UniversityMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, university.FieldName)
	}
	if m.deviationLowerValue != nil {
		fields = append(fields, university.FieldDeviationLowerValue)
	}
	if m.deviationUpperValue != nil {
		fields = append(fields, university.FieldDeviationUpperValue)
	}
	if m.abbreviation != nil {
		fields = append(fields, university.FieldAbbreviation)
	}
	if m.prefecture != nil {
		fields = append(fields, university.FieldPrefecture)
	}
	if m.created_at != nil {
		fields = append(fields, university.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UniversityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case university.FieldName:
		return m.Name()
	case university.FieldDeviationLowerValue:
		return m.DeviationLowerValue()
	case university.FieldDeviationUpperValue:
		return m.DeviationUpperValue()
	case university.FieldAbbreviation:
		return m.Abbreviation()
	case university.FieldPrefecture:
		return m.Prefecture()
	case university.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UniversityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case university.FieldName:
		return m.OldName(ctx)
	case university.FieldDeviationLowerValue:
		return m.OldDeviationLowerValue(ctx)
	case university.FieldDeviationUpperValue:
		return m.OldDeviationUpperValue(ctx)
	case university.FieldAbbreviation:
		return m.OldAbbreviation(ctx)
	case university.FieldPrefecture:
		return m.OldPrefecture(ctx)
	case university.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown University field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniversityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case university.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case university.FieldDeviationLowerValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviationLowerValue(v)
		return nil
	case university.FieldDeviationUpperValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviationUpperValue(v)
		return nil
	case university.FieldAbbreviation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbbreviation(v)
		return nil
	case university.FieldPrefecture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrefecture(v)
		return nil
	case university.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown University field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UniversityMutation) AddedFields() []string {
	var fields []string
	if m.adddeviationLowerValue != nil {
		fields = append(fields, university.FieldDeviationLowerValue)
	}
	if m.adddeviationUpperValue != nil {
		fields = append(fields, university.FieldDeviationUpperValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UniversityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case university.FieldDeviationLowerValue:
		return m.AddedDeviationLowerValue()
	case university.FieldDeviationUpperValue:
		return m.AddedDeviationUpperValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UniversityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case university.FieldDeviationLowerValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviationLowerValue(v)
		return nil
	case university.FieldDeviationUpperValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviationUpperValue(v)
		return nil
	}
	return fmt.Errorf("unknown University numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UniversityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UniversityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UniversityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown University nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UniversityMutation) ResetField(name string) error {
	switch name {
	case university.FieldName:
		m.ResetName()
		return nil
	case university.FieldDeviationLowerValue:
		m.ResetDeviationLowerValue()
		return nil
	case university.FieldDeviationUpperValue:
		m.ResetDeviationUpperValue()
		return nil
	case university.FieldAbbreviation:
		m.ResetAbbreviation()
		return nil
	case university.FieldPrefecture:
		m.ResetPrefecture()
		return nil
	case university.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown University field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UniversityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UniversityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UniversityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UniversityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UniversityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UniversityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UniversityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown University unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UniversityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown University edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	weight         *float64
	addweight      *float64
	height         *float64
	addheight      *float64
	clerk_id       *string
	is_male        *bool
	created_at     *time.Time
	clearedFields  map[string]struct{}
	sukipis        *int
	clearedsukipis bool
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *UserMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetHeight sets the "height" field.
func (m *UserMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *UserMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *UserMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *UserMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *UserMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetClerkID sets the "clerk_id" field.
func (m *UserMutation) SetClerkID(s string) {
	m.clerk_id = &s
}

// ClerkID returns the value of the "clerk_id" field in the mutation.
func (m *UserMutation) ClerkID() (r string, exists bool) {
	v := m.clerk_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClerkID returns the old "clerk_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClerkID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClerkID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClerkID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClerkID: %w", err)
	}
	return oldValue.ClerkID, nil
}

// ResetClerkID resets all changes to the "clerk_id" field.
func (m *UserMutation) ResetClerkID() {
	m.clerk_id = nil
}

// SetIsMale sets the "is_male" field.
func (m *UserMutation) SetIsMale(b bool) {
	m.is_male = &b
}

// IsMale returns the value of the "is_male" field in the mutation.
func (m *UserMutation) IsMale() (r bool, exists bool) {
	v := m.is_male
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMale returns the old "is_male" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsMale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMale: %w", err)
	}
	return oldValue.IsMale, nil
}

// ResetIsMale resets all changes to the "is_male" field.
func (m *UserMutation) ResetIsMale() {
	m.is_male = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSukipisID sets the "sukipis" edge to the Sukipi entity by id.
func (m *UserMutation) SetSukipisID(id int) {
	m.sukipis = &id
}

// ClearSukipis clears the "sukipis" edge to the Sukipi entity.
func (m *UserMutation) ClearSukipis() {
	m.clearedsukipis = true
}

// SukipisCleared reports if the "sukipis" edge to the Sukipi entity was cleared.
func (m *UserMutation) SukipisCleared() bool {
	return m.clearedsukipis
}

// SukipisID returns the "sukipis" edge ID in the mutation.
func (m *UserMutation) SukipisID() (id int, exists bool) {
	if m.sukipis != nil {
		return *m.sukipis, true
	}
	return
}

// SukipisIDs returns the "sukipis" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SukipisID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SukipisIDs() (ids []int) {
	if id := m.sukipis; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSukipis resets all changes to the "sukipis" edge.
func (m *UserMutation) ResetSukipis() {
	m.sukipis = nil
	m.clearedsukipis = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.clerk_id != nil {
		fields = append(fields, user.FieldClerkID)
	}
	if m.is_male != nil {
		fields = append(fields, user.FieldIsMale)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldHeight:
		return m.Height()
	case user.FieldClerkID:
		return m.ClerkID()
	case user.FieldIsMale:
		return m.IsMale()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldHeight:
		return m.OldHeight(ctx)
	case user.FieldClerkID:
		return m.OldClerkID(ctx)
	case user.FieldIsMale:
		return m.OldIsMale(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case user.FieldClerkID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClerkID(v)
		return nil
	case user.FieldIsMale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMale(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, user.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldWeight:
		return m.AddedWeight()
	case user.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldHeight:
		m.ResetHeight()
		return nil
	case user.FieldClerkID:
		m.ResetClerkID()
		return nil
	case user.FieldIsMale:
		m.ResetIsMale()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sukipis != nil {
		edges = append(edges, user.EdgeSukipis)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSukipis:
		if id := m.sukipis; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsukipis {
		edges = append(edges, user.EdgeSukipis)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSukipis:
		return m.clearedsukipis
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSukipis:
		m.ClearSukipis()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSukipis:
		m.ResetSukipis()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
