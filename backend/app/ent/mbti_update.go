// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/mbti"
	"flehmen-api/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MbtiUpdate is the builder for updating Mbti entities.
type MbtiUpdate struct {
	config
	hooks    []Hook
	mutation *MbtiMutation
}

// Where appends a list predicates to the MbtiUpdate builder.
func (mu *MbtiUpdate) Where(ps ...predicate.Mbti) *MbtiUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetType sets the "type" field.
func (mu *MbtiUpdate) SetType(s string) *MbtiUpdate {
	mu.mutation.SetType(s)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MbtiUpdate) SetNillableType(s *string) *MbtiUpdate {
	if s != nil {
		mu.SetType(*s)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MbtiUpdate) SetCreatedAt(t time.Time) *MbtiUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MbtiUpdate) SetNillableCreatedAt(t *time.Time) *MbtiUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// Mutation returns the MbtiMutation object of the builder.
func (mu *MbtiUpdate) Mutation() *MbtiMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MbtiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MbtiUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MbtiUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MbtiUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MbtiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mbti.Table, mbti.Columns, sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(mbti.FieldType, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(mbti.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mbti.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MbtiUpdateOne is the builder for updating a single Mbti entity.
type MbtiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MbtiMutation
}

// SetType sets the "type" field.
func (muo *MbtiUpdateOne) SetType(s string) *MbtiUpdateOne {
	muo.mutation.SetType(s)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MbtiUpdateOne) SetNillableType(s *string) *MbtiUpdateOne {
	if s != nil {
		muo.SetType(*s)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MbtiUpdateOne) SetCreatedAt(t time.Time) *MbtiUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MbtiUpdateOne) SetNillableCreatedAt(t *time.Time) *MbtiUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// Mutation returns the MbtiMutation object of the builder.
func (muo *MbtiUpdateOne) Mutation() *MbtiMutation {
	return muo.mutation
}

// Where appends a list predicates to the MbtiUpdate builder.
func (muo *MbtiUpdateOne) Where(ps ...predicate.Mbti) *MbtiUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MbtiUpdateOne) Select(field string, fields ...string) *MbtiUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mbti entity.
func (muo *MbtiUpdateOne) Save(ctx context.Context) (*Mbti, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MbtiUpdateOne) SaveX(ctx context.Context) *Mbti {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MbtiUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MbtiUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MbtiUpdateOne) sqlSave(ctx context.Context) (_node *Mbti, err error) {
	_spec := sqlgraph.NewUpdateSpec(mbti.Table, mbti.Columns, sqlgraph.NewFieldSpec(mbti.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mbti.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mbti.FieldID)
		for _, f := range fields {
			if !mbti.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mbti.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(mbti.FieldType, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(mbti.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Mbti{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mbti.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
