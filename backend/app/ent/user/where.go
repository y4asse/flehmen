// Code generated by ent, DO NOT EDIT.

package user

import (
	"flehmen-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWeight, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeight, v))
}

// ClerkID applies equality check predicate on the "clerk_id" field. It's identical to ClerkIDEQ.
func ClerkID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClerkID, v))
}

// IsMale applies equality check predicate on the "is_male" field. It's identical to IsMaleEQ.
func IsMale(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsMale, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWeight, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHeight, v))
}

// ClerkIDEQ applies the EQ predicate on the "clerk_id" field.
func ClerkIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClerkID, v))
}

// ClerkIDNEQ applies the NEQ predicate on the "clerk_id" field.
func ClerkIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldClerkID, v))
}

// ClerkIDIn applies the In predicate on the "clerk_id" field.
func ClerkIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldClerkID, vs...))
}

// ClerkIDNotIn applies the NotIn predicate on the "clerk_id" field.
func ClerkIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldClerkID, vs...))
}

// ClerkIDGT applies the GT predicate on the "clerk_id" field.
func ClerkIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldClerkID, v))
}

// ClerkIDGTE applies the GTE predicate on the "clerk_id" field.
func ClerkIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldClerkID, v))
}

// ClerkIDLT applies the LT predicate on the "clerk_id" field.
func ClerkIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldClerkID, v))
}

// ClerkIDLTE applies the LTE predicate on the "clerk_id" field.
func ClerkIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldClerkID, v))
}

// ClerkIDContains applies the Contains predicate on the "clerk_id" field.
func ClerkIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldClerkID, v))
}

// ClerkIDHasPrefix applies the HasPrefix predicate on the "clerk_id" field.
func ClerkIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldClerkID, v))
}

// ClerkIDHasSuffix applies the HasSuffix predicate on the "clerk_id" field.
func ClerkIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldClerkID, v))
}

// ClerkIDEqualFold applies the EqualFold predicate on the "clerk_id" field.
func ClerkIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldClerkID, v))
}

// ClerkIDContainsFold applies the ContainsFold predicate on the "clerk_id" field.
func ClerkIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldClerkID, v))
}

// IsMaleEQ applies the EQ predicate on the "is_male" field.
func IsMaleEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsMale, v))
}

// IsMaleNEQ applies the NEQ predicate on the "is_male" field.
func IsMaleNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsMale, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSpecialEvents applies the HasEdge predicate on the "special_events" edge.
func HasSpecialEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SpecialEventsTable, SpecialEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpecialEventsWith applies the HasEdge predicate on the "special_events" edge with a given conditions (other predicates).
func HasSpecialEventsWith(preds ...predicate.SpecialEvent) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSpecialEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSukipis applies the HasEdge predicate on the "sukipis" edge.
func HasSukipis() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SukipisTable, SukipisColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSukipisWith applies the HasEdge predicate on the "sukipis" edge with a given conditions (other predicates).
func HasSukipisWith(preds ...predicate.Sukipi) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSukipisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
