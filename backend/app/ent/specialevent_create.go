// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/specialevent"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpecialEventCreate is the builder for creating a SpecialEvent entity.
type SpecialEventCreate struct {
	config
	mutation *SpecialEventMutation
	hooks    []Hook
}

// SetOccuredAt sets the "occured_at" field.
func (sec *SpecialEventCreate) SetOccuredAt(t time.Time) *SpecialEventCreate {
	sec.mutation.SetOccuredAt(t)
	return sec
}

// SetTitle sets the "title" field.
func (sec *SpecialEventCreate) SetTitle(s string) *SpecialEventCreate {
	sec.mutation.SetTitle(s)
	return sec
}

// SetDetailComment sets the "detail_comment" field.
func (sec *SpecialEventCreate) SetDetailComment(s string) *SpecialEventCreate {
	sec.mutation.SetDetailComment(s)
	return sec
}

// Mutation returns the SpecialEventMutation object of the builder.
func (sec *SpecialEventCreate) Mutation() *SpecialEventMutation {
	return sec.mutation
}

// Save creates the SpecialEvent in the database.
func (sec *SpecialEventCreate) Save(ctx context.Context) (*SpecialEvent, error) {
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SpecialEventCreate) SaveX(ctx context.Context) *SpecialEvent {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SpecialEventCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SpecialEventCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SpecialEventCreate) check() error {
	if _, ok := sec.mutation.OccuredAt(); !ok {
		return &ValidationError{Name: "occured_at", err: errors.New(`ent: missing required field "SpecialEvent.occured_at"`)}
	}
	if _, ok := sec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SpecialEvent.title"`)}
	}
	if _, ok := sec.mutation.DetailComment(); !ok {
		return &ValidationError{Name: "detail_comment", err: errors.New(`ent: missing required field "SpecialEvent.detail_comment"`)}
	}
	return nil
}

func (sec *SpecialEventCreate) sqlSave(ctx context.Context) (*SpecialEvent, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SpecialEventCreate) createSpec() (*SpecialEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &SpecialEvent{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(specialevent.Table, sqlgraph.NewFieldSpec(specialevent.FieldID, field.TypeInt))
	)
	if value, ok := sec.mutation.OccuredAt(); ok {
		_spec.SetField(specialevent.FieldOccuredAt, field.TypeTime, value)
		_node.OccuredAt = value
	}
	if value, ok := sec.mutation.Title(); ok {
		_spec.SetField(specialevent.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sec.mutation.DetailComment(); ok {
		_spec.SetField(specialevent.FieldDetailComment, field.TypeString, value)
		_node.DetailComment = value
	}
	return _node, _spec
}

// SpecialEventCreateBulk is the builder for creating many SpecialEvent entities in bulk.
type SpecialEventCreateBulk struct {
	config
	err      error
	builders []*SpecialEventCreate
}

// Save creates the SpecialEvent entities in the database.
func (secb *SpecialEventCreateBulk) Save(ctx context.Context) ([]*SpecialEvent, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SpecialEvent, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpecialEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SpecialEventCreateBulk) SaveX(ctx context.Context) []*SpecialEvent {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SpecialEventCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SpecialEventCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
