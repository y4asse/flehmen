// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/nextaction"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NextActionCreate is the builder for creating a NextAction entity.
type NextActionCreate struct {
	config
	mutation *NextActionMutation
	hooks    []Hook
}

// SetScoreMin sets the "score_min" field.
func (nac *NextActionCreate) SetScoreMin(i int) *NextActionCreate {
	nac.mutation.SetScoreMin(i)
	return nac
}

// SetScoreMax sets the "score_max" field.
func (nac *NextActionCreate) SetScoreMax(i int) *NextActionCreate {
	nac.mutation.SetScoreMax(i)
	return nac
}

// SetAction sets the "action" field.
func (nac *NextActionCreate) SetAction(s string) *NextActionCreate {
	nac.mutation.SetAction(s)
	return nac
}

// Mutation returns the NextActionMutation object of the builder.
func (nac *NextActionCreate) Mutation() *NextActionMutation {
	return nac.mutation
}

// Save creates the NextAction in the database.
func (nac *NextActionCreate) Save(ctx context.Context) (*NextAction, error) {
	return withHooks(ctx, nac.sqlSave, nac.mutation, nac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nac *NextActionCreate) SaveX(ctx context.Context) *NextAction {
	v, err := nac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nac *NextActionCreate) Exec(ctx context.Context) error {
	_, err := nac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nac *NextActionCreate) ExecX(ctx context.Context) {
	if err := nac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nac *NextActionCreate) check() error {
	if _, ok := nac.mutation.ScoreMin(); !ok {
		return &ValidationError{Name: "score_min", err: errors.New(`ent: missing required field "NextAction.score_min"`)}
	}
	if _, ok := nac.mutation.ScoreMax(); !ok {
		return &ValidationError{Name: "score_max", err: errors.New(`ent: missing required field "NextAction.score_max"`)}
	}
	if _, ok := nac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "NextAction.action"`)}
	}
	return nil
}

func (nac *NextActionCreate) sqlSave(ctx context.Context) (*NextAction, error) {
	if err := nac.check(); err != nil {
		return nil, err
	}
	_node, _spec := nac.createSpec()
	if err := sqlgraph.CreateNode(ctx, nac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nac.mutation.id = &_node.ID
	nac.mutation.done = true
	return _node, nil
}

func (nac *NextActionCreate) createSpec() (*NextAction, *sqlgraph.CreateSpec) {
	var (
		_node = &NextAction{config: nac.config}
		_spec = sqlgraph.NewCreateSpec(nextaction.Table, sqlgraph.NewFieldSpec(nextaction.FieldID, field.TypeInt))
	)
	if value, ok := nac.mutation.ScoreMin(); ok {
		_spec.SetField(nextaction.FieldScoreMin, field.TypeInt, value)
		_node.ScoreMin = value
	}
	if value, ok := nac.mutation.ScoreMax(); ok {
		_spec.SetField(nextaction.FieldScoreMax, field.TypeInt, value)
		_node.ScoreMax = value
	}
	if value, ok := nac.mutation.Action(); ok {
		_spec.SetField(nextaction.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	return _node, _spec
}

// NextActionCreateBulk is the builder for creating many NextAction entities in bulk.
type NextActionCreateBulk struct {
	config
	err      error
	builders []*NextActionCreate
}

// Save creates the NextAction entities in the database.
func (nacb *NextActionCreateBulk) Save(ctx context.Context) ([]*NextAction, error) {
	if nacb.err != nil {
		return nil, nacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nacb.builders))
	nodes := make([]*NextAction, len(nacb.builders))
	mutators := make([]Mutator, len(nacb.builders))
	for i := range nacb.builders {
		func(i int, root context.Context) {
			builder := nacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NextActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nacb *NextActionCreateBulk) SaveX(ctx context.Context) []*NextAction {
	v, err := nacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nacb *NextActionCreateBulk) Exec(ctx context.Context) error {
	_, err := nacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nacb *NextActionCreateBulk) ExecX(ctx context.Context) {
	if err := nacb.Exec(ctx); err != nil {
		panic(err)
	}
}
