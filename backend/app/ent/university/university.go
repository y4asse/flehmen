// Code generated by ent, DO NOT EDIT.

package university

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the university type in the database.
	Label = "university"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeviationLowerValue holds the string denoting the deviationlowervalue field in the database.
	FieldDeviationLowerValue = "deviation_lower_value"
	// FieldDeviationUpperValue holds the string denoting the deviationuppervalue field in the database.
	FieldDeviationUpperValue = "deviation_upper_value"
	// FieldAbbreviation holds the string denoting the abbreviation field in the database.
	FieldAbbreviation = "abbreviation"
	// FieldPrefecture holds the string denoting the prefecture field in the database.
	FieldPrefecture = "prefecture"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the university in the database.
	Table = "universities"
)

// Columns holds all SQL columns for university fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDeviationLowerValue,
	FieldDeviationUpperValue,
	FieldAbbreviation,
	FieldPrefecture,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the University queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDeviationLowerValue orders the results by the deviationLowerValue field.
func ByDeviationLowerValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviationLowerValue, opts...).ToFunc()
}

// ByDeviationUpperValue orders the results by the deviationUpperValue field.
func ByDeviationUpperValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviationUpperValue, opts...).ToFunc()
}

// ByAbbreviation orders the results by the abbreviation field.
func ByAbbreviation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbbreviation, opts...).ToFunc()
}

// ByPrefecture orders the results by the prefecture field.
func ByPrefecture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrefecture, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
