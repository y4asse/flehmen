// Code generated by ent, DO NOT EDIT.

package university

import (
	"flehmen-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.University {
	return predicate.University(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.University {
	return predicate.University(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.University {
	return predicate.University(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.University {
	return predicate.University(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.University {
	return predicate.University(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldName, v))
}

// DeviationLowerValue applies equality check predicate on the "deviationLowerValue" field. It's identical to DeviationLowerValueEQ.
func DeviationLowerValue(v int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldDeviationLowerValue, v))
}

// DeviationUpperValue applies equality check predicate on the "deviationUpperValue" field. It's identical to DeviationUpperValueEQ.
func DeviationUpperValue(v int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldDeviationUpperValue, v))
}

// Abbreviation applies equality check predicate on the "abbreviation" field. It's identical to AbbreviationEQ.
func Abbreviation(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldAbbreviation, v))
}

// Prefecture applies equality check predicate on the "prefecture" field. It's identical to PrefectureEQ.
func Prefecture(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldPrefecture, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.University {
	return predicate.University(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.University {
	return predicate.University(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.University {
	return predicate.University(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.University {
	return predicate.University(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.University {
	return predicate.University(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.University {
	return predicate.University(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.University {
	return predicate.University(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.University {
	return predicate.University(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.University {
	return predicate.University(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.University {
	return predicate.University(sql.FieldContainsFold(FieldName, v))
}

// DeviationLowerValueEQ applies the EQ predicate on the "deviationLowerValue" field.
func DeviationLowerValueEQ(v int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldDeviationLowerValue, v))
}

// DeviationLowerValueNEQ applies the NEQ predicate on the "deviationLowerValue" field.
func DeviationLowerValueNEQ(v int) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldDeviationLowerValue, v))
}

// DeviationLowerValueIn applies the In predicate on the "deviationLowerValue" field.
func DeviationLowerValueIn(vs ...int) predicate.University {
	return predicate.University(sql.FieldIn(FieldDeviationLowerValue, vs...))
}

// DeviationLowerValueNotIn applies the NotIn predicate on the "deviationLowerValue" field.
func DeviationLowerValueNotIn(vs ...int) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldDeviationLowerValue, vs...))
}

// DeviationLowerValueGT applies the GT predicate on the "deviationLowerValue" field.
func DeviationLowerValueGT(v int) predicate.University {
	return predicate.University(sql.FieldGT(FieldDeviationLowerValue, v))
}

// DeviationLowerValueGTE applies the GTE predicate on the "deviationLowerValue" field.
func DeviationLowerValueGTE(v int) predicate.University {
	return predicate.University(sql.FieldGTE(FieldDeviationLowerValue, v))
}

// DeviationLowerValueLT applies the LT predicate on the "deviationLowerValue" field.
func DeviationLowerValueLT(v int) predicate.University {
	return predicate.University(sql.FieldLT(FieldDeviationLowerValue, v))
}

// DeviationLowerValueLTE applies the LTE predicate on the "deviationLowerValue" field.
func DeviationLowerValueLTE(v int) predicate.University {
	return predicate.University(sql.FieldLTE(FieldDeviationLowerValue, v))
}

// DeviationUpperValueEQ applies the EQ predicate on the "deviationUpperValue" field.
func DeviationUpperValueEQ(v int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldDeviationUpperValue, v))
}

// DeviationUpperValueNEQ applies the NEQ predicate on the "deviationUpperValue" field.
func DeviationUpperValueNEQ(v int) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldDeviationUpperValue, v))
}

// DeviationUpperValueIn applies the In predicate on the "deviationUpperValue" field.
func DeviationUpperValueIn(vs ...int) predicate.University {
	return predicate.University(sql.FieldIn(FieldDeviationUpperValue, vs...))
}

// DeviationUpperValueNotIn applies the NotIn predicate on the "deviationUpperValue" field.
func DeviationUpperValueNotIn(vs ...int) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldDeviationUpperValue, vs...))
}

// DeviationUpperValueGT applies the GT predicate on the "deviationUpperValue" field.
func DeviationUpperValueGT(v int) predicate.University {
	return predicate.University(sql.FieldGT(FieldDeviationUpperValue, v))
}

// DeviationUpperValueGTE applies the GTE predicate on the "deviationUpperValue" field.
func DeviationUpperValueGTE(v int) predicate.University {
	return predicate.University(sql.FieldGTE(FieldDeviationUpperValue, v))
}

// DeviationUpperValueLT applies the LT predicate on the "deviationUpperValue" field.
func DeviationUpperValueLT(v int) predicate.University {
	return predicate.University(sql.FieldLT(FieldDeviationUpperValue, v))
}

// DeviationUpperValueLTE applies the LTE predicate on the "deviationUpperValue" field.
func DeviationUpperValueLTE(v int) predicate.University {
	return predicate.University(sql.FieldLTE(FieldDeviationUpperValue, v))
}

// AbbreviationEQ applies the EQ predicate on the "abbreviation" field.
func AbbreviationEQ(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldAbbreviation, v))
}

// AbbreviationNEQ applies the NEQ predicate on the "abbreviation" field.
func AbbreviationNEQ(v string) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldAbbreviation, v))
}

// AbbreviationIn applies the In predicate on the "abbreviation" field.
func AbbreviationIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldIn(FieldAbbreviation, vs...))
}

// AbbreviationNotIn applies the NotIn predicate on the "abbreviation" field.
func AbbreviationNotIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldAbbreviation, vs...))
}

// AbbreviationGT applies the GT predicate on the "abbreviation" field.
func AbbreviationGT(v string) predicate.University {
	return predicate.University(sql.FieldGT(FieldAbbreviation, v))
}

// AbbreviationGTE applies the GTE predicate on the "abbreviation" field.
func AbbreviationGTE(v string) predicate.University {
	return predicate.University(sql.FieldGTE(FieldAbbreviation, v))
}

// AbbreviationLT applies the LT predicate on the "abbreviation" field.
func AbbreviationLT(v string) predicate.University {
	return predicate.University(sql.FieldLT(FieldAbbreviation, v))
}

// AbbreviationLTE applies the LTE predicate on the "abbreviation" field.
func AbbreviationLTE(v string) predicate.University {
	return predicate.University(sql.FieldLTE(FieldAbbreviation, v))
}

// AbbreviationContains applies the Contains predicate on the "abbreviation" field.
func AbbreviationContains(v string) predicate.University {
	return predicate.University(sql.FieldContains(FieldAbbreviation, v))
}

// AbbreviationHasPrefix applies the HasPrefix predicate on the "abbreviation" field.
func AbbreviationHasPrefix(v string) predicate.University {
	return predicate.University(sql.FieldHasPrefix(FieldAbbreviation, v))
}

// AbbreviationHasSuffix applies the HasSuffix predicate on the "abbreviation" field.
func AbbreviationHasSuffix(v string) predicate.University {
	return predicate.University(sql.FieldHasSuffix(FieldAbbreviation, v))
}

// AbbreviationEqualFold applies the EqualFold predicate on the "abbreviation" field.
func AbbreviationEqualFold(v string) predicate.University {
	return predicate.University(sql.FieldEqualFold(FieldAbbreviation, v))
}

// AbbreviationContainsFold applies the ContainsFold predicate on the "abbreviation" field.
func AbbreviationContainsFold(v string) predicate.University {
	return predicate.University(sql.FieldContainsFold(FieldAbbreviation, v))
}

// PrefectureEQ applies the EQ predicate on the "prefecture" field.
func PrefectureEQ(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldPrefecture, v))
}

// PrefectureNEQ applies the NEQ predicate on the "prefecture" field.
func PrefectureNEQ(v string) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldPrefecture, v))
}

// PrefectureIn applies the In predicate on the "prefecture" field.
func PrefectureIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldIn(FieldPrefecture, vs...))
}

// PrefectureNotIn applies the NotIn predicate on the "prefecture" field.
func PrefectureNotIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldPrefecture, vs...))
}

// PrefectureGT applies the GT predicate on the "prefecture" field.
func PrefectureGT(v string) predicate.University {
	return predicate.University(sql.FieldGT(FieldPrefecture, v))
}

// PrefectureGTE applies the GTE predicate on the "prefecture" field.
func PrefectureGTE(v string) predicate.University {
	return predicate.University(sql.FieldGTE(FieldPrefecture, v))
}

// PrefectureLT applies the LT predicate on the "prefecture" field.
func PrefectureLT(v string) predicate.University {
	return predicate.University(sql.FieldLT(FieldPrefecture, v))
}

// PrefectureLTE applies the LTE predicate on the "prefecture" field.
func PrefectureLTE(v string) predicate.University {
	return predicate.University(sql.FieldLTE(FieldPrefecture, v))
}

// PrefectureContains applies the Contains predicate on the "prefecture" field.
func PrefectureContains(v string) predicate.University {
	return predicate.University(sql.FieldContains(FieldPrefecture, v))
}

// PrefectureHasPrefix applies the HasPrefix predicate on the "prefecture" field.
func PrefectureHasPrefix(v string) predicate.University {
	return predicate.University(sql.FieldHasPrefix(FieldPrefecture, v))
}

// PrefectureHasSuffix applies the HasSuffix predicate on the "prefecture" field.
func PrefectureHasSuffix(v string) predicate.University {
	return predicate.University(sql.FieldHasSuffix(FieldPrefecture, v))
}

// PrefectureEqualFold applies the EqualFold predicate on the "prefecture" field.
func PrefectureEqualFold(v string) predicate.University {
	return predicate.University(sql.FieldEqualFold(FieldPrefecture, v))
}

// PrefectureContainsFold applies the ContainsFold predicate on the "prefecture" field.
func PrefectureContainsFold(v string) predicate.University {
	return predicate.University(sql.FieldContainsFold(FieldPrefecture, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.University {
	return predicate.University(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.University {
	return predicate.University(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.University {
	return predicate.University(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.University {
	return predicate.University(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.University {
	return predicate.University(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.University {
	return predicate.University(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.University) predicate.University {
	return predicate.University(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.University) predicate.University {
	return predicate.University(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.University) predicate.University {
	return predicate.University(sql.NotPredicates(p))
}
