// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/tweet"
	"flehmen-api/ent/twitteruser"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwitterUserCreate is the builder for creating a TwitterUser entity.
type TwitterUserCreate struct {
	config
	mutation *TwitterUserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tuc *TwitterUserCreate) SetName(s string) *TwitterUserCreate {
	tuc.mutation.SetName(s)
	return tuc
}

// SetUsername sets the "username" field.
func (tuc *TwitterUserCreate) SetUsername(s string) *TwitterUserCreate {
	tuc.mutation.SetUsername(s)
	return tuc
}

// SetCreatedAt sets the "created_at" field.
func (tuc *TwitterUserCreate) SetCreatedAt(t time.Time) *TwitterUserCreate {
	tuc.mutation.SetCreatedAt(t)
	return tuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuc *TwitterUserCreate) SetNillableCreatedAt(t *time.Time) *TwitterUserCreate {
	if t != nil {
		tuc.SetCreatedAt(*t)
	}
	return tuc
}

// SetID sets the "id" field.
func (tuc *TwitterUserCreate) SetID(i int) *TwitterUserCreate {
	tuc.mutation.SetID(i)
	return tuc
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by IDs.
func (tuc *TwitterUserCreate) AddReplyIDs(ids ...int) *TwitterUserCreate {
	tuc.mutation.AddReplyIDs(ids...)
	return tuc
}

// AddReplies adds the "replies" edges to the Tweet entity.
func (tuc *TwitterUserCreate) AddReplies(t ...*Tweet) *TwitterUserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuc.AddReplyIDs(ids...)
}

// Mutation returns the TwitterUserMutation object of the builder.
func (tuc *TwitterUserCreate) Mutation() *TwitterUserMutation {
	return tuc.mutation
}

// Save creates the TwitterUser in the database.
func (tuc *TwitterUserCreate) Save(ctx context.Context) (*TwitterUser, error) {
	tuc.defaults()
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TwitterUserCreate) SaveX(ctx context.Context) *TwitterUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TwitterUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TwitterUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuc *TwitterUserCreate) defaults() {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		v := twitteruser.DefaultCreatedAt()
		tuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TwitterUserCreate) check() error {
	if _, ok := tuc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TwitterUser.name"`)}
	}
	if _, ok := tuc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "TwitterUser.username"`)}
	}
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TwitterUser.created_at"`)}
	}
	return nil
}

func (tuc *TwitterUserCreate) sqlSave(ctx context.Context) (*TwitterUser, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TwitterUserCreate) createSpec() (*TwitterUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitterUser{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(twitteruser.Table, sqlgraph.NewFieldSpec(twitteruser.FieldID, field.TypeInt))
	)
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.Name(); ok {
		_spec.SetField(twitteruser.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tuc.mutation.Username(); ok {
		_spec.SetField(twitteruser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := tuc.mutation.CreatedAt(); ok {
		_spec.SetField(twitteruser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tuc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitteruser.RepliesTable,
			Columns: []string{twitteruser.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TwitterUserCreateBulk is the builder for creating many TwitterUser entities in bulk.
type TwitterUserCreateBulk struct {
	config
	err      error
	builders []*TwitterUserCreate
}

// Save creates the TwitterUser entities in the database.
func (tucb *TwitterUserCreateBulk) Save(ctx context.Context) ([]*TwitterUser, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TwitterUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitterUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TwitterUserCreateBulk) SaveX(ctx context.Context) []*TwitterUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TwitterUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TwitterUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}
