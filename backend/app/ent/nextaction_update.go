// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flehmen-api/ent/nextaction"
	"flehmen-api/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NextActionUpdate is the builder for updating NextAction entities.
type NextActionUpdate struct {
	config
	hooks    []Hook
	mutation *NextActionMutation
}

// Where appends a list predicates to the NextActionUpdate builder.
func (nau *NextActionUpdate) Where(ps ...predicate.NextAction) *NextActionUpdate {
	nau.mutation.Where(ps...)
	return nau
}

// SetScoreMin sets the "score_min" field.
func (nau *NextActionUpdate) SetScoreMin(i int) *NextActionUpdate {
	nau.mutation.ResetScoreMin()
	nau.mutation.SetScoreMin(i)
	return nau
}

// SetNillableScoreMin sets the "score_min" field if the given value is not nil.
func (nau *NextActionUpdate) SetNillableScoreMin(i *int) *NextActionUpdate {
	if i != nil {
		nau.SetScoreMin(*i)
	}
	return nau
}

// AddScoreMin adds i to the "score_min" field.
func (nau *NextActionUpdate) AddScoreMin(i int) *NextActionUpdate {
	nau.mutation.AddScoreMin(i)
	return nau
}

// SetScoreMax sets the "score_max" field.
func (nau *NextActionUpdate) SetScoreMax(i int) *NextActionUpdate {
	nau.mutation.ResetScoreMax()
	nau.mutation.SetScoreMax(i)
	return nau
}

// SetNillableScoreMax sets the "score_max" field if the given value is not nil.
func (nau *NextActionUpdate) SetNillableScoreMax(i *int) *NextActionUpdate {
	if i != nil {
		nau.SetScoreMax(*i)
	}
	return nau
}

// AddScoreMax adds i to the "score_max" field.
func (nau *NextActionUpdate) AddScoreMax(i int) *NextActionUpdate {
	nau.mutation.AddScoreMax(i)
	return nau
}

// SetAction sets the "action" field.
func (nau *NextActionUpdate) SetAction(s string) *NextActionUpdate {
	nau.mutation.SetAction(s)
	return nau
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (nau *NextActionUpdate) SetNillableAction(s *string) *NextActionUpdate {
	if s != nil {
		nau.SetAction(*s)
	}
	return nau
}

// Mutation returns the NextActionMutation object of the builder.
func (nau *NextActionUpdate) Mutation() *NextActionMutation {
	return nau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nau *NextActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nau.sqlSave, nau.mutation, nau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nau *NextActionUpdate) SaveX(ctx context.Context) int {
	affected, err := nau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nau *NextActionUpdate) Exec(ctx context.Context) error {
	_, err := nau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nau *NextActionUpdate) ExecX(ctx context.Context) {
	if err := nau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nau *NextActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nextaction.Table, nextaction.Columns, sqlgraph.NewFieldSpec(nextaction.FieldID, field.TypeInt))
	if ps := nau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nau.mutation.ScoreMin(); ok {
		_spec.SetField(nextaction.FieldScoreMin, field.TypeInt, value)
	}
	if value, ok := nau.mutation.AddedScoreMin(); ok {
		_spec.AddField(nextaction.FieldScoreMin, field.TypeInt, value)
	}
	if value, ok := nau.mutation.ScoreMax(); ok {
		_spec.SetField(nextaction.FieldScoreMax, field.TypeInt, value)
	}
	if value, ok := nau.mutation.AddedScoreMax(); ok {
		_spec.AddField(nextaction.FieldScoreMax, field.TypeInt, value)
	}
	if value, ok := nau.mutation.Action(); ok {
		_spec.SetField(nextaction.FieldAction, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nextaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nau.mutation.done = true
	return n, nil
}

// NextActionUpdateOne is the builder for updating a single NextAction entity.
type NextActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NextActionMutation
}

// SetScoreMin sets the "score_min" field.
func (nauo *NextActionUpdateOne) SetScoreMin(i int) *NextActionUpdateOne {
	nauo.mutation.ResetScoreMin()
	nauo.mutation.SetScoreMin(i)
	return nauo
}

// SetNillableScoreMin sets the "score_min" field if the given value is not nil.
func (nauo *NextActionUpdateOne) SetNillableScoreMin(i *int) *NextActionUpdateOne {
	if i != nil {
		nauo.SetScoreMin(*i)
	}
	return nauo
}

// AddScoreMin adds i to the "score_min" field.
func (nauo *NextActionUpdateOne) AddScoreMin(i int) *NextActionUpdateOne {
	nauo.mutation.AddScoreMin(i)
	return nauo
}

// SetScoreMax sets the "score_max" field.
func (nauo *NextActionUpdateOne) SetScoreMax(i int) *NextActionUpdateOne {
	nauo.mutation.ResetScoreMax()
	nauo.mutation.SetScoreMax(i)
	return nauo
}

// SetNillableScoreMax sets the "score_max" field if the given value is not nil.
func (nauo *NextActionUpdateOne) SetNillableScoreMax(i *int) *NextActionUpdateOne {
	if i != nil {
		nauo.SetScoreMax(*i)
	}
	return nauo
}

// AddScoreMax adds i to the "score_max" field.
func (nauo *NextActionUpdateOne) AddScoreMax(i int) *NextActionUpdateOne {
	nauo.mutation.AddScoreMax(i)
	return nauo
}

// SetAction sets the "action" field.
func (nauo *NextActionUpdateOne) SetAction(s string) *NextActionUpdateOne {
	nauo.mutation.SetAction(s)
	return nauo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (nauo *NextActionUpdateOne) SetNillableAction(s *string) *NextActionUpdateOne {
	if s != nil {
		nauo.SetAction(*s)
	}
	return nauo
}

// Mutation returns the NextActionMutation object of the builder.
func (nauo *NextActionUpdateOne) Mutation() *NextActionMutation {
	return nauo.mutation
}

// Where appends a list predicates to the NextActionUpdate builder.
func (nauo *NextActionUpdateOne) Where(ps ...predicate.NextAction) *NextActionUpdateOne {
	nauo.mutation.Where(ps...)
	return nauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nauo *NextActionUpdateOne) Select(field string, fields ...string) *NextActionUpdateOne {
	nauo.fields = append([]string{field}, fields...)
	return nauo
}

// Save executes the query and returns the updated NextAction entity.
func (nauo *NextActionUpdateOne) Save(ctx context.Context) (*NextAction, error) {
	return withHooks(ctx, nauo.sqlSave, nauo.mutation, nauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nauo *NextActionUpdateOne) SaveX(ctx context.Context) *NextAction {
	node, err := nauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nauo *NextActionUpdateOne) Exec(ctx context.Context) error {
	_, err := nauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nauo *NextActionUpdateOne) ExecX(ctx context.Context) {
	if err := nauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nauo *NextActionUpdateOne) sqlSave(ctx context.Context) (_node *NextAction, err error) {
	_spec := sqlgraph.NewUpdateSpec(nextaction.Table, nextaction.Columns, sqlgraph.NewFieldSpec(nextaction.FieldID, field.TypeInt))
	id, ok := nauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NextAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nextaction.FieldID)
		for _, f := range fields {
			if !nextaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nextaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nauo.mutation.ScoreMin(); ok {
		_spec.SetField(nextaction.FieldScoreMin, field.TypeInt, value)
	}
	if value, ok := nauo.mutation.AddedScoreMin(); ok {
		_spec.AddField(nextaction.FieldScoreMin, field.TypeInt, value)
	}
	if value, ok := nauo.mutation.ScoreMax(); ok {
		_spec.SetField(nextaction.FieldScoreMax, field.TypeInt, value)
	}
	if value, ok := nauo.mutation.AddedScoreMax(); ok {
		_spec.AddField(nextaction.FieldScoreMax, field.TypeInt, value)
	}
	if value, ok := nauo.mutation.Action(); ok {
		_spec.SetField(nextaction.FieldAction, field.TypeString, value)
	}
	_node = &NextAction{config: nauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nextaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nauo.mutation.done = true
	return _node, nil
}
