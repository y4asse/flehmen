// Code generated by ent, DO NOT EDIT.

package sukipi

import (
	"flehmen-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldName, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldWeight, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldHeight, v))
}

// XID applies equality check predicate on the "x_id" field. It's identical to XIDEQ.
func XID(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldXID, v))
}

// InstagramID applies equality check predicate on the "instagram_id" field. It's identical to InstagramIDEQ.
func InstagramID(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldInstagramID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldCreatedAt, v))
}

// IsMale applies equality check predicate on the "is_male" field. It's identical to IsMaleEQ.
func IsMale(v bool) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldIsMale, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldStartAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContainsFold(FieldName, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldWeight, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldHeight, v))
}

// XIDEQ applies the EQ predicate on the "x_id" field.
func XIDEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldXID, v))
}

// XIDNEQ applies the NEQ predicate on the "x_id" field.
func XIDNEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldXID, v))
}

// XIDIn applies the In predicate on the "x_id" field.
func XIDIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldXID, vs...))
}

// XIDNotIn applies the NotIn predicate on the "x_id" field.
func XIDNotIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldXID, vs...))
}

// XIDGT applies the GT predicate on the "x_id" field.
func XIDGT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldXID, v))
}

// XIDGTE applies the GTE predicate on the "x_id" field.
func XIDGTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldXID, v))
}

// XIDLT applies the LT predicate on the "x_id" field.
func XIDLT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldXID, v))
}

// XIDLTE applies the LTE predicate on the "x_id" field.
func XIDLTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldXID, v))
}

// XIDContains applies the Contains predicate on the "x_id" field.
func XIDContains(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContains(FieldXID, v))
}

// XIDHasPrefix applies the HasPrefix predicate on the "x_id" field.
func XIDHasPrefix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasPrefix(FieldXID, v))
}

// XIDHasSuffix applies the HasSuffix predicate on the "x_id" field.
func XIDHasSuffix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasSuffix(FieldXID, v))
}

// XIDIsNil applies the IsNil predicate on the "x_id" field.
func XIDIsNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIsNull(FieldXID))
}

// XIDNotNil applies the NotNil predicate on the "x_id" field.
func XIDNotNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotNull(FieldXID))
}

// XIDEqualFold applies the EqualFold predicate on the "x_id" field.
func XIDEqualFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEqualFold(FieldXID, v))
}

// XIDContainsFold applies the ContainsFold predicate on the "x_id" field.
func XIDContainsFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContainsFold(FieldXID, v))
}

// InstagramIDEQ applies the EQ predicate on the "instagram_id" field.
func InstagramIDEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldInstagramID, v))
}

// InstagramIDNEQ applies the NEQ predicate on the "instagram_id" field.
func InstagramIDNEQ(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldInstagramID, v))
}

// InstagramIDIn applies the In predicate on the "instagram_id" field.
func InstagramIDIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldInstagramID, vs...))
}

// InstagramIDNotIn applies the NotIn predicate on the "instagram_id" field.
func InstagramIDNotIn(vs ...string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldInstagramID, vs...))
}

// InstagramIDGT applies the GT predicate on the "instagram_id" field.
func InstagramIDGT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldInstagramID, v))
}

// InstagramIDGTE applies the GTE predicate on the "instagram_id" field.
func InstagramIDGTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldInstagramID, v))
}

// InstagramIDLT applies the LT predicate on the "instagram_id" field.
func InstagramIDLT(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldInstagramID, v))
}

// InstagramIDLTE applies the LTE predicate on the "instagram_id" field.
func InstagramIDLTE(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldInstagramID, v))
}

// InstagramIDContains applies the Contains predicate on the "instagram_id" field.
func InstagramIDContains(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContains(FieldInstagramID, v))
}

// InstagramIDHasPrefix applies the HasPrefix predicate on the "instagram_id" field.
func InstagramIDHasPrefix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasPrefix(FieldInstagramID, v))
}

// InstagramIDHasSuffix applies the HasSuffix predicate on the "instagram_id" field.
func InstagramIDHasSuffix(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldHasSuffix(FieldInstagramID, v))
}

// InstagramIDIsNil applies the IsNil predicate on the "instagram_id" field.
func InstagramIDIsNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIsNull(FieldInstagramID))
}

// InstagramIDNotNil applies the NotNil predicate on the "instagram_id" field.
func InstagramIDNotNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotNull(FieldInstagramID))
}

// InstagramIDEqualFold applies the EqualFold predicate on the "instagram_id" field.
func InstagramIDEqualFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEqualFold(FieldInstagramID, v))
}

// InstagramIDContainsFold applies the ContainsFold predicate on the "instagram_id" field.
func InstagramIDContainsFold(v string) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldContainsFold(FieldInstagramID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldCreatedAt, v))
}

// IsMaleEQ applies the EQ predicate on the "is_male" field.
func IsMaleEQ(v bool) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldIsMale, v))
}

// IsMaleNEQ applies the NEQ predicate on the "is_male" field.
func IsMaleNEQ(v bool) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldIsMale, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Sukipi {
	return predicate.Sukipi(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Sukipi {
	return predicate.Sukipi(sql.FieldNotNull(FieldStartAt))
}

// HasMbti applies the HasEdge predicate on the "mbti" edge.
func HasMbti() predicate.Sukipi {
	return predicate.Sukipi(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MbtiTable, MbtiColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMbtiWith applies the HasEdge predicate on the "mbti" edge with a given conditions (other predicates).
func HasMbtiWith(preds ...predicate.Mbti) predicate.Sukipi {
	return predicate.Sukipi(func(s *sql.Selector) {
		step := newMbtiStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTweets applies the HasEdge predicate on the "tweets" edge.
func HasTweets() predicate.Sukipi {
	return predicate.Sukipi(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TweetsTable, TweetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTweetsWith applies the HasEdge predicate on the "tweets" edge with a given conditions (other predicates).
func HasTweetsWith(preds ...predicate.Tweet) predicate.Sukipi {
	return predicate.Sukipi(func(s *sql.Selector) {
		step := newTweetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sukipi) predicate.Sukipi {
	return predicate.Sukipi(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sukipi) predicate.Sukipi {
	return predicate.Sukipi(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sukipi) predicate.Sukipi {
	return predicate.Sukipi(sql.NotPredicates(p))
}
