// Code generated by ent, DO NOT EDIT.

package sukipi

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sukipi type in the database.
	Label = "sukipi"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldXID holds the string denoting the x_id field in the database.
	FieldXID = "x_id"
	// FieldHobby holds the string denoting the hobby field in the database.
	FieldHobby = "hobby"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldShoesSize holds the string denoting the shoessize field in the database.
	FieldShoesSize = "shoes_size"
	// FieldFamily holds the string denoting the family field in the database.
	FieldFamily = "family"
	// FieldNearlyStation holds the string denoting the nearly_station field in the database.
	FieldNearlyStation = "nearly_station"
	// FieldLikedAt holds the string denoting the liked_at field in the database.
	FieldLikedAt = "liked_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMbti holds the string denoting the mbti edge name in mutations.
	EdgeMbti = "mbti"
	// EdgeTweets holds the string denoting the tweets edge name in mutations.
	EdgeTweets = "tweets"
	// Table holds the table name of the sukipi in the database.
	Table = "sukipis"
	// MbtiTable is the table that holds the mbti relation/edge.
	MbtiTable = "sukipis"
	// MbtiInverseTable is the table name for the Mbti entity.
	// It exists in this package in order to avoid circular dependency with the "mbti" package.
	MbtiInverseTable = "mbtis"
	// MbtiColumn is the table column denoting the mbti relation/edge.
	MbtiColumn = "sukipi_mbti"
	// TweetsTable is the table that holds the tweets relation/edge.
	TweetsTable = "tweets"
	// TweetsInverseTable is the table name for the Tweet entity.
	// It exists in this package in order to avoid circular dependency with the "tweet" package.
	TweetsInverseTable = "tweets"
	// TweetsColumn is the table column denoting the tweets relation/edge.
	TweetsColumn = "sukipi_tweets"
)

// Columns holds all SQL columns for sukipi fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldWeight,
	FieldHeight,
	FieldXID,
	FieldHobby,
	FieldBirthday,
	FieldShoesSize,
	FieldFamily,
	FieldNearlyStation,
	FieldLikedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sukipis"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sukipi_mbti",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Sukipi queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByXID orders the results by the x_id field.
func ByXID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXID, opts...).ToFunc()
}

// ByHobby orders the results by the hobby field.
func ByHobby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHobby, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByShoesSize orders the results by the shoesSize field.
func ByShoesSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShoesSize, opts...).ToFunc()
}

// ByFamily orders the results by the family field.
func ByFamily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamily, opts...).ToFunc()
}

// ByNearlyStation orders the results by the nearly_station field.
func ByNearlyStation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNearlyStation, opts...).ToFunc()
}

// ByLikedAt orders the results by the liked_at field.
func ByLikedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMbtiField orders the results by mbti field.
func ByMbtiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMbtiStep(), sql.OrderByField(field, opts...))
	}
}

// ByTweetsCount orders the results by tweets count.
func ByTweetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTweetsStep(), opts...)
	}
}

// ByTweets orders the results by tweets terms.
func ByTweets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTweetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMbtiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MbtiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MbtiTable, MbtiColumn),
	)
}
func newTweetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TweetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TweetsTable, TweetsColumn),
	)
}
