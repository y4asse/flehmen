// Code generated by ent, DO NOT EDIT.

package sukipi

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sukipi type in the database.
	Label = "sukipi"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLikedAt holds the string denoting the liked_at field in the database.
	FieldLikedAt = "liked_at"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldXID holds the string denoting the x_id field in the database.
	FieldXID = "x_id"
	// FieldHobby holds the string denoting the hobby field in the database.
	FieldHobby = "hobby"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldShoesSize holds the string denoting the shoessize field in the database.
	FieldShoesSize = "shoes_size"
	// FieldFamily holds the string denoting the family field in the database.
	FieldFamily = "family"
	// FieldNearlyStation holds the string denoting the nearly_station field in the database.
	FieldNearlyStation = "nearly_station"
	// FieldMbti holds the string denoting the mbti field in the database.
	FieldMbti = "mbti"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the sukipi in the database.
	Table = "sukipis"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "sukipis"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "sukipi_user"
)

// Columns holds all SQL columns for sukipi fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLikedAt,
	FieldWeight,
	FieldHeight,
	FieldXID,
	FieldHobby,
	FieldBirthday,
	FieldShoesSize,
	FieldFamily,
	FieldNearlyStation,
	FieldMbti,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sukipis"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sukipi_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Sukipi queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLikedAt orders the results by the liked_at field.
func ByLikedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikedAt, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByXID orders the results by the x_id field.
func ByXID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXID, opts...).ToFunc()
}

// ByHobby orders the results by the hobby field.
func ByHobby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHobby, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByShoesSize orders the results by the shoesSize field.
func ByShoesSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShoesSize, opts...).ToFunc()
}

// ByFamily orders the results by the family field.
func ByFamily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamily, opts...).ToFunc()
}

// ByNearlyStation orders the results by the nearly_station field.
func ByNearlyStation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNearlyStation, opts...).ToFunc()
}

// ByMbti orders the results by the mbti field.
func ByMbti(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMbti, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
