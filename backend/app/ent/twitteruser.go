// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flehmen-api/ent/twitteruser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TwitterUser is the model entity for the TwitterUser schema.
type TwitterUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TwitterUserQuery when eager-loading is set.
	Edges        TwitterUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TwitterUserEdges holds the relations/edges for other nodes in the graph.
type TwitterUserEdges struct {
	// Replies holds the value of the replies edge.
	Replies []*Tweet `json:"replies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e TwitterUserEdges) RepliesOrErr() ([]*Tweet, error) {
	if e.loadedTypes[0] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwitterUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twitteruser.FieldID:
			values[i] = new(sql.NullInt64)
		case twitteruser.FieldName, twitteruser.FieldUsername:
			values[i] = new(sql.NullString)
		case twitteruser.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwitterUser fields.
func (tu *TwitterUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twitteruser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = int(value.Int64)
		case twitteruser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tu.Name = value.String
			}
		case twitteruser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				tu.Username = value.String
			}
		case twitteruser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tu.CreatedAt = value.Time
			}
		default:
			tu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwitterUser.
// This includes values selected through modifiers, order, etc.
func (tu *TwitterUser) Value(name string) (ent.Value, error) {
	return tu.selectValues.Get(name)
}

// QueryReplies queries the "replies" edge of the TwitterUser entity.
func (tu *TwitterUser) QueryReplies() *TweetQuery {
	return NewTwitterUserClient(tu.config).QueryReplies(tu)
}

// Update returns a builder for updating this TwitterUser.
// Note that you need to call TwitterUser.Unwrap() before calling this method if this TwitterUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TwitterUser) Update() *TwitterUserUpdateOne {
	return NewTwitterUserClient(tu.config).UpdateOne(tu)
}

// Unwrap unwraps the TwitterUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TwitterUser) Unwrap() *TwitterUser {
	_tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TwitterUser is not a transactional entity")
	}
	tu.config.driver = _tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TwitterUser) String() string {
	var builder strings.Builder
	builder.WriteString("TwitterUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tu.ID))
	builder.WriteString("name=")
	builder.WriteString(tu.Name)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(tu.Username)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tu.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TwitterUsers is a parsable slice of TwitterUser.
type TwitterUsers []*TwitterUser
